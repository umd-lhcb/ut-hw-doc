{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation site for UT electronic boards designed by UMD LHCb group.","title":"Getting started"},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2019, UMD LHCb group All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"dcb/dcb_assembly/dcb_assembly/","text":"Visual inspection of new DCB Record serial number from sticker on the DCB to the database and put the next label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted. Install thermal gap filler on the DCB backplate There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB. Install the heat pipe on the DCB backplate To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear. Optical Mezzanines Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx . An assembled mezzanine will look like this, where the black component in a yellow casing is a VTTx. Note A VTTx is black while a VTRx is red . They both have a yellow casing and look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs Final assembly Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts and Kapton washers (part# 5611-33-5) to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts and washers will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers (part# 5611-130-5) to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. They should be oriented with their metal side away from the board Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3, 4-6 J4 pins 3-4 J10 pins 3-4, 5-6 J12 1-2, 3-4, 5-6 J13 1-3, 2-4 Continuity check Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"DCB mechanical assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#visual-inspection-of-new-dcb","text":"Record serial number from sticker on the DCB to the database and put the next label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted.","title":"Visual inspection of new DCB"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-thermal-gap-filler-on-the-dcb-backplate","text":"There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB.","title":"Install thermal gap filler on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-the-heat-pipe-on-the-dcb-backplate","text":"To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear.","title":"Install the heat pipe on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#optical-mezzanines","text":"Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx . An assembled mezzanine will look like this, where the black component in a yellow casing is a VTTx. Note A VTTx is black while a VTRx is red . They both have a yellow casing and look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs","title":"Optical Mezzanines"},{"location":"dcb/dcb_assembly/dcb_assembly/#final-assembly","text":"Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts and Kapton washers (part# 5611-33-5) to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts and washers will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers (part# 5611-130-5) to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. They should be oriented with their metal side away from the board Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3, 4-6 J4 pins 3-4 J10 pins 3-4, 5-6 J12 1-2, 3-4, 5-6 J13 1-3, 2-4","title":"Final assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#continuity-check","text":"Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"Continuity check"},{"location":"dcb/dcb_qa/dcb_qa/","text":"Warning Make sure you are grounded at all times when handling the DCB! Failing to do so could destroy the boards! The DCB has a few purposes; aggregating data, controlling the stave, and monitoring. It has 4 optical mezzanines with 3 VTTxs and 1 VTRx, as well as 1 master GBTx, 1 GBT-SCA, and 6 data GBTxs. The DCB talks to the stave through the Backplane connecter and a computer through the mezzanines. The PRBS test checks the DCB ability to get data from the GBTxs to the computer. A psuedo-random bit sequence, or PRBS, is generated in the data GBTxs and sent to our computer via the VTTxs. This test verifies the black data lines on the image. In the SALT test, we tell the stave what data to send to the DCB to check the grey data lines. Each line represents 12 E-links connecting the stave to the GBTxs. For our tests, we have the stave sending c4 repeated to the DCB. It is easy for this to get out of phase, which is why we accept any stable data in the memory monitor as a success. To see possible out-of-phase responses, you can break c4 into 8bit binary, shift it one bit left or right, then make it hex again. We check the DCB control of the stave by testing TFC loopback, where a GBTx sends a header of 04 to the stave. We know the E-links will be good as they have just been checked, so we expect to see the stave repeating 04 back to us if everything is working correctly. It is also fine here to see a bit-shift, making it look like the stave is repeating 01 , 02 , or 08 . There are also ADCs (analog to digital converters) we look at to verify the power and, for the ones attached to thermistors, monitor the temperature on the DCB itself and the stave. Note Make sure to keep the database up to date as you go through the tests. Fusing GBTx Warning If the DCB has already gone through the burn-in, skip fusing and go straight to \" Setting up DCB \" Verify the jumper on J2 , next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB. It goes over the outline with the label OMDBMC . Don't worry about screwing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attached. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under D:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2.20180725.jar . Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Note Register 365 should not be checked and fused. Shut off power to the DCB and move the right jumper on J2 up one to be in-line with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green Add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector OMDBMC Setting up DCB Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection will either be JD10 (for stave JP8 ) or JD11 (for stave JP11 ) Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in. Checking Power There are 3 separate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10 , and B goes to the odd board, JD11 . It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. Note On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQ by going to Applications , WinCC , Project Administrator , then double click on the top project. Programming Data GBTxs There are 6 data GBTxs on each DCB, and these must be programed every time the board gets power cycled. Note nanoDAQ has some documentation here . A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here . In the nanoDAQ command prompt, we're going to pull the reset, also called GPIO, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier. PRBS Test Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes There is a screen above the power switch that shows some readout values for the lvr. In the top left chunk, we care about the values of i_SENSE_MON3 , i_SENSE_MON4 , and i_SENSE_MON7 . Add the values from 3 and 4 together and record it on the database under \"1.5V current[A]\" Record the value from 7 on the database under \"2.5V current[A]\" Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" Warning Stop here if the DCB has NOT gone through the burn-in yet!!! SALT Testing The following three tests (SALT, TFC, and ADC) have different instructions dependant on the slot the DCB is connected to, which is determined by the stave connection. Each slot only tests half of the board. Remember JP8 goes to slot JD10 and JP11 goes to slot JD11 . Changing the stave connection is a process, so we'll test the same half on many boards, then swap everything to check the other half. Note Make sure to program the data GBTxs if the DCB has been powered off since doing so For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, click on the first Dev1_0 In nanoDAQ , type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using -s 2 Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using -s 4 Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14 TFC Test Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating ADC Read Out If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows PC : UMDlab, GBT ID : 0, SCA ID : 0, Version : 2 For now, set address to Read Channel and Line to 24, then 25, then 0. Clicking read on the right updates the Data out field. Line 24 should be around 0.83 and line 25 should be around 0.5 Line 0 should be around 0.53 If you're getting an error, try clicking Activate Channel then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to Current Source and put ffffffff (8 f s) in Data in , then click read/write Put address back to Read Channel and check lines 1, 16, 17, and 18 by clicking read and looking at Data in Expected value 0.15 Optical to Master GBT We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from J4 on the DCB, directly under an optical mezzanine. It is also labeled MC CONFIGSELECT Set up GBT Client such that GBT ID : 0, Device Address : 7, Register Address : 28, Size: 1 Click Read on the right and you should see 00 in Data out Put ff in Data in and click read/write Data out should now read ff","title":"DCB QA"},{"location":"dcb/dcb_qa/dcb_qa/#fusing-gbtx","text":"Warning If the DCB has already gone through the burn-in, skip fusing and go straight to \" Setting up DCB \" Verify the jumper on J2 , next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB. It goes over the outline with the label OMDBMC . Don't worry about screwing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attached. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under D:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2.20180725.jar . Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Note Register 365 should not be checked and fused. Shut off power to the DCB and move the right jumper on J2 up one to be in-line with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green Add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector OMDBMC","title":"Fusing GBTx"},{"location":"dcb/dcb_qa/dcb_qa/#setting-up-dcb","text":"Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection will either be JD10 (for stave JP8 ) or JD11 (for stave JP11 ) Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in.","title":"Setting up DCB"},{"location":"dcb/dcb_qa/dcb_qa/#checking-power","text":"There are 3 separate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10 , and B goes to the odd board, JD11 . It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. Note On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQ by going to Applications , WinCC , Project Administrator , then double click on the top project.","title":"Checking Power"},{"location":"dcb/dcb_qa/dcb_qa/#programming-data-gbtxs","text":"There are 6 data GBTxs on each DCB, and these must be programed every time the board gets power cycled. Note nanoDAQ has some documentation here . A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here . In the nanoDAQ command prompt, we're going to pull the reset, also called GPIO, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier.","title":"Programming Data GBTxs"},{"location":"dcb/dcb_qa/dcb_qa/#prbs-test","text":"Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes There is a screen above the power switch that shows some readout values for the lvr. In the top left chunk, we care about the values of i_SENSE_MON3 , i_SENSE_MON4 , and i_SENSE_MON7 . Add the values from 3 and 4 together and record it on the database under \"1.5V current[A]\" Record the value from 7 on the database under \"2.5V current[A]\" Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" Warning Stop here if the DCB has NOT gone through the burn-in yet!!!","title":"PRBS Test"},{"location":"dcb/dcb_qa/dcb_qa/#salt-testing","text":"The following three tests (SALT, TFC, and ADC) have different instructions dependant on the slot the DCB is connected to, which is determined by the stave connection. Each slot only tests half of the board. Remember JP8 goes to slot JD10 and JP11 goes to slot JD11 . Changing the stave connection is a process, so we'll test the same half on many boards, then swap everything to check the other half. Note Make sure to program the data GBTxs if the DCB has been powered off since doing so For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, click on the first Dev1_0 In nanoDAQ , type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using -s 2 Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using -s 4 Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14","title":"SALT Testing"},{"location":"dcb/dcb_qa/dcb_qa/#tfc-test","text":"Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating","title":"TFC Test"},{"location":"dcb/dcb_qa/dcb_qa/#adc-read-out","text":"If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows PC : UMDlab, GBT ID : 0, SCA ID : 0, Version : 2 For now, set address to Read Channel and Line to 24, then 25, then 0. Clicking read on the right updates the Data out field. Line 24 should be around 0.83 and line 25 should be around 0.5 Line 0 should be around 0.53 If you're getting an error, try clicking Activate Channel then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to Current Source and put ffffffff (8 f s) in Data in , then click read/write Put address back to Read Channel and check lines 1, 16, 17, and 18 by clicking read and looking at Data in Expected value 0.15","title":"ADC Read Out"},{"location":"dcb/dcb_qa/dcb_qa/#optical-to-master-gbt","text":"We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from J4 on the DCB, directly under an optical mezzanine. It is also labeled MC CONFIGSELECT Set up GBT Client such that GBT ID : 0, Device Address : 7, Register Address : 28, Size: 1 Click Read on the right and you should see 00 in Data out Put ff in Data in and click read/write Data out should now read ff","title":"Optical to Master GBT"},{"location":"lvr/ccm_id/ccm_id/","text":"CCM identification field guide Identification of a CCM of unknown configuration can be broken down into two parts: identifying the intended output voltage (1.2, 1.5, or 2.5 Volts = 12, 15, 25) and identifying whether it is a stand-alone single master (A), a master with support for a slave (M), or a slave (S). Here we'll call these Output Level and Role, respectively. Identifying Output Level To identify the output voltage of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: Code Voltage output [V] 104 1.2 203 1.5 502 2.5 Identifying the CCM Role To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Type Image Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1] Example CCM An example identification is shown in the picture.","title":"CCM Identification Guide"},{"location":"lvr/ccm_id/ccm_id/#ccm-identification-field-guide","text":"Identification of a CCM of unknown configuration can be broken down into two parts: identifying the intended output voltage (1.2, 1.5, or 2.5 Volts = 12, 15, 25) and identifying whether it is a stand-alone single master (A), a master with support for a slave (M), or a slave (S). Here we'll call these Output Level and Role, respectively.","title":"CCM identification field guide"},{"location":"lvr/ccm_id/ccm_id/#identifying-output-level","text":"To identify the output voltage of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: Code Voltage output [V] 104 1.2 203 1.5 502 2.5","title":"Identifying Output Level"},{"location":"lvr/ccm_id/ccm_id/#identifying-the-ccm-role","text":"To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Type Image Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1]","title":"Identifying the CCM Role"},{"location":"lvr/ccm_id/ccm_id/#example-ccm","text":"An example identification is shown in the picture.","title":"Example CCM"},{"location":"lvr/ccm_qa/ccm_qa/","text":"This procedure acts under the assumption that the user is utilizing the pre-built CCM QA setup. Turn on both oscilloscopes connected to the LVR Take a master slave CCM pair Validate that the pair are both either 1.2, 1.5, or 2.5 V Install the CCM master-slave pair on channels 1 & 2 of the LVR. Note the following In the case of a master-slave pair, you CANNOT install 2 masters or 2 slaves on the same 2-channel pair Set the input voltage of the power supply to ~5.5 V Note the wave pattern on the first oscilloscope displaying 4 distinct channels. Note the following Note that channels 1 and 2 correspond to the master, where channels 3 and 4 correspond to the slave. This is an examlpe of a curve for a 1.5 MS CCM. The waveform displayed should be a smooth curve as shown in the figure above. This is an example of a curve for a 2.5 A CCM. The waveform displayed, you will note, has a slight oscillation. This is to be expected as this is just the representation of the turn-on voltage. This is an example of a curve for a 1.25 A CCM. The waveform displayed, you will note, has a slight oscillation. This is to be expected as this is just the representation of the turn-on voltage. Note the following In addition to similar shapes, ch1&2 (yellow and green) and ch3&4 (blue and red) (if slave is present) should converge to the same amplitude within +/- 3% or so. It may be useful to include a \"top\" voltage measurement on the display to do this easily. Locate the variable resistor on the master CCM, and note the voltage reading on channel 1 of the second oscilloscope, denoted Vtop . Adjust the variable resistor so the voltage reading of channel 1 corresponds to the voltage of the CCM (i.e. a 1.5 V CCM should have a channel reading of ~1.5 V) as shown below for a 1.5 V CCM After adjusting the variable resistor, go back to the first oscilloscope readings If the waveform displayed is still not smooth, note the following If the bottom two curves ONLY are not smooth, this indicates a problem with the slave If BOTH curves are not smooth, replace the master CCM with a validated master CCM with the same voltage identity. If after replacing the curve is smooth and normal, the previous master CCM has a problem If after replacing the bottom curve is not smooth, this indicates a problem with the previous master CCM and the current slave CCM Once the CCM is fully QAd, place a colored dot labelling its type on the front of the CCM, and a numbered sticker on the back of the CCM to indicate its serial number. Once all CCMs in a roll are complete, place the CCMs back into the roll and label the roll as \"XXY#\", where XX denotes the CCM type (i.e. 25, 15, 12), Y denotes the pairing (A, M, S) and # denotes the serial number (001, 002, ....)","title":"CCM QA"},{"location":"lvr/lvr_config/lvr_assembly/","text":"Components LVR LVR Baseplate Wedge Locks 8mm flat head (not countersunk) M2.5 screws M2.5 washers 5mm M2 screws Thermal gap filler strips Thermal paste (GL-20-10 for now) Kapton Tape Punch Screwdrivers Wedge Locks It is not clear to me if Kapton tape is needed to prevent the wedge lock from abrading the solder mask, so I include the step for now. Put a strip of kapton along the edges of the CCM side of the board. Poke holes for the wedge lock screws with a punch. Attach the wedgelocks (IMPORTANT: The side that can be adjusted with an alan key needs to face the LVR outputs (two big connectors)). Attach each wedgelock with 2 M2 screws. Thermal gap filler Remove one side of the plastic backing and press the gap filler strip on to the exposed metal on the LHC4913 side of the board, aligning the screw holes. Then remove the plastic backing from the other side. Repeat for the other side of the board. Put the applicator on an LHC4913 chip, gently push the plunger, and spread some paste on the chip. Only the metal heat sink needs to be covered. See attached picture for approximate thickness. Repeat for all 10 chips. Baseplate","title":"Lvr assembly"},{"location":"lvr/lvr_config/lvr_assembly/#components","text":"LVR LVR Baseplate Wedge Locks 8mm flat head (not countersunk) M2.5 screws M2.5 washers 5mm M2 screws Thermal gap filler strips Thermal paste (GL-20-10 for now) Kapton Tape Punch Screwdrivers","title":"Components"},{"location":"lvr/lvr_config/lvr_assembly/#wedge-locks","text":"It is not clear to me if Kapton tape is needed to prevent the wedge lock from abrading the solder mask, so I include the step for now. Put a strip of kapton along the edges of the CCM side of the board. Poke holes for the wedge lock screws with a punch. Attach the wedgelocks (IMPORTANT: The side that can be adjusted with an alan key needs to face the LVR outputs (two big connectors)). Attach each wedgelock with 2 M2 screws.","title":"Wedge Locks"},{"location":"lvr/lvr_config/lvr_assembly/#thermal-gap-filler","text":"Remove one side of the plastic backing and press the gap filler strip on to the exposed metal on the LHC4913 side of the board, aligning the screw holes. Then remove the plastic backing from the other side. Repeat for the other side of the board. Put the applicator on an LHC4913 chip, gently push the plunger, and spread some paste on the chip. Only the metal heat sink needs to be covered. See attached picture for approximate thickness. Repeat for all 10 chips.","title":"Thermal gap filler"},{"location":"lvr/lvr_config/lvr_assembly/#baseplate","text":"","title":"Baseplate"},{"location":"lvr/lvr_config/lvr_config/","text":"Abstract The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible. Channel Sense lines If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: Channels Pins CH1 & 5 1 & 2 CH2 & 6 4 & 5 CH3 & 7 4 & 5 CH4 & 8 7 & 8 Setting Up Monitor/Programmer This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: Turn power off Connect jumpers between J22 pins 2 & 4 ( V_pump ) Connect jumpers between J22 pins 1 & 3 ( V_jtag ) Connect programmer to J17 . Turn power on Initiate the program sequence Move jumpers on J22 to connect pins 4 & 6 and pins 3 & 5 To set up the monitor: Connect Raspberry Pi leads to J18 . Note Leads must start at pin row 3-4, not 1-2. Turn on raspberry Pi and run code V_SENSE refers to the output feedback voltage from the CCM V_REGUL_OUT refers to full input voltage i_SENSE_MON refers to current through resistor ____ Fuse/Channel Configuration This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: Label on fuse Channels F3-4 CH5 & 6 F1-2 CH7 & 8 F7-8 CH1 & 2 F5-6 CH3 & 4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB -> MSB , with the fourth toggle putting the channel in an always on state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts. Configuration of LVR LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8. Normal versus Duty Cycle Mode For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every ~3 seconds that appears to last for ~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than ~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR. Master/slave pairings Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be notified which channels are M+S pairs, via SW4. The OFF setting of the switch corresponds to a M+S pair, while the ON state is the setting for two single masters SW4 switch Channels 1 CH1 & 2 2 CH3 & 4 3 CH5 & 6 4 CH7 & 8 Note When setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom's notes on the configuration switches for the LVR, including master/slave and general enables. IMPORTANT THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \"ON\" ON THE SWITCH IS LOGIC 0 AND \"OFF\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5 and NOT 2,3,4,5. Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8. Overtemperature/Undervoltage Lockout The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB -> MSB ) Binary setting LVR shuts off at [C] 0101 39 1101 30 1001 55 0001 70 The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: SW6 switcher 1-3 Undervoltage lockout at [V] 0,0,0 5.9 1,0,0 5.4 0,1,0 5.1 0,0,1 4.6 1,1,0 5.1 0,1,1 4.1 1,1,1 3.9 1,0,1 4.6","title":"LVR Configuration"},{"location":"lvr/lvr_config/lvr_config/#abstract","text":"The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible.","title":"Abstract"},{"location":"lvr/lvr_config/lvr_config/#channel-sense-lines","text":"If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: Channels Pins CH1 & 5 1 & 2 CH2 & 6 4 & 5 CH3 & 7 4 & 5 CH4 & 8 7 & 8","title":"Channel Sense lines"},{"location":"lvr/lvr_config/lvr_config/#setting-up-monitorprogrammer","text":"This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: Turn power off Connect jumpers between J22 pins 2 & 4 ( V_pump ) Connect jumpers between J22 pins 1 & 3 ( V_jtag ) Connect programmer to J17 . Turn power on Initiate the program sequence Move jumpers on J22 to connect pins 4 & 6 and pins 3 & 5 To set up the monitor: Connect Raspberry Pi leads to J18 . Note Leads must start at pin row 3-4, not 1-2. Turn on raspberry Pi and run code V_SENSE refers to the output feedback voltage from the CCM V_REGUL_OUT refers to full input voltage i_SENSE_MON refers to current through resistor ____","title":"Setting Up Monitor/Programmer"},{"location":"lvr/lvr_config/lvr_config/#fusechannel-configuration","text":"This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: Label on fuse Channels F3-4 CH5 & 6 F1-2 CH7 & 8 F7-8 CH1 & 2 F5-6 CH3 & 4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB -> MSB , with the fourth toggle putting the channel in an always on state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts.","title":"Fuse/Channel Configuration"},{"location":"lvr/lvr_config/lvr_config/#configuration-of-lvr","text":"LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8.","title":"Configuration of LVR"},{"location":"lvr/lvr_config/lvr_config/#normal-versus-duty-cycle-mode","text":"For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every ~3 seconds that appears to last for ~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than ~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR.","title":"Normal versus Duty Cycle Mode"},{"location":"lvr/lvr_config/lvr_config/#masterslave-pairings","text":"Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be notified which channels are M+S pairs, via SW4. The OFF setting of the switch corresponds to a M+S pair, while the ON state is the setting for two single masters SW4 switch Channels 1 CH1 & 2 2 CH3 & 4 3 CH5 & 6 4 CH7 & 8 Note When setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom's notes on the configuration switches for the LVR, including master/slave and general enables. IMPORTANT THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \"ON\" ON THE SWITCH IS LOGIC 0 AND \"OFF\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5 and NOT 2,3,4,5. Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8.","title":"Master/slave pairings"},{"location":"lvr/lvr_config/lvr_config/#overtemperatureundervoltage-lockout","text":"The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB -> MSB ) Binary setting LVR shuts off at [C] 0101 39 1101 30 1001 55 0001 70 The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: SW6 switcher 1-3 Undervoltage lockout at [V] 0,0,0 5.9 1,0,0 5.4 0,1,0 5.1 0,0,1 4.6 1,1,0 5.1 0,1,1 4.1 1,1,1 3.9 1,0,1 4.6","title":"Overtemperature/Undervoltage Lockout"},{"location":"lvr/lvr_qa/lvr_qa/","text":"Before you proceed Beware that TP5 is NOT GND. The silkscreen label applies to the adjacent TP2 . Fused power input breakout board silk screen circuit labels are incorrect. The LVR outputs should be connected to a benign load that can withstand having upwards of 7V output. (i.e. the LVR channel outputs follow the input power rail if the CCM is not populated and configured.) Extreme caution is needed when connecting test lead clips to the test points. The test points are rather fragile and easily pulled of the board. Care must be taken to avoid temporary unintended shorts from the high density of surrounding components, via's, and traces. When configuring the CCMs on the LVR, remember that CCM voltage types split down the middle of the LVR (i.e. CH1-4 must have the same CCM voltage, CH5-8 must have the same CCM voltage) Going down the board on one side, arrange CCMs as master, slave, master, slave, etc. The Master-Slave configurations require a jumper ON the LVR output breakout board that electrically connects the master and slave output rails together. Note Serial Number of LVR and CCM before beginning QA Verify that the chassis and power ground are isolated > 25K Ohms. Measure input voltage at the large lugs at the top of the board Use any GND test point on the board (i.e. TP7 ) Repeat measurement reversing the polarity of leads (ground isolation circuit is different each way) Activate the LVR monitor if it is not already running Go to PuTTY and select Monitor Pi Both user name and password are \" lvr \" Set power supply initially to 1.6V and the current limited to 2.0A Connect provided input breakout board. Verify polarity of connections visually Red wire in positive terminal of power supply Blue wire in negative terminal Negative terminal and power supply ground shorted If not using the raspberry pi LVR monitor, place a DVM (DC Voltage Meter) between TP3 (3.3V) and TP6 (GND) to monitor the 3.3V rail, otherwise proceed to step 8. Place another DVM between TP8 (1.5V) and TP6 (GND) to monitor the 1.5N rail Note You can also use the LVR monitor for this section, looking at the Vin_FPGA_3V3 and Vin_FPGA_1V5 reading. Slowly increase the input voltage from the initial 1.6V to a max of 4.5V while monitoring the 3.3V and 1.5V rails to make sure they stay below the max values. Warning STOP IF VALUES BELOW ARE EXCEEDED to prevent damage. 1.5V x 110% = 1.65V 3.3V x 110% = 3.63V Tip It may be useful to let the rail approach the desired value, then turn down the setpoint to a value much below the current input voltage in order to find the plateau (max voltage where the rail 'sticks') more quickly Adjust P1 to obtain 1.5V on TP8 . Continue increasing the input voltage and similarly adjust P2 to obtain 3.3V on TP3 . Both the 3.3V and 1.5V rails should be correct now and no longer increase as input voltage goes up. \u03c3V should be 0.01 V or less if possible. Expected input current given by the supply at this point should be around 0.09A. If it is substantially more there may be an issue. If not using the LVR monitor, place a DVM between TP4 ( Vop_rail ) and TP7 (GND). Otherwise proceed. Slowly increase the input voltage to 7V until EITHER the Vop_rail stops increasing or hits 5.5V. (Note this is just the same thing as for the 1.5V and 3.3V, just now it's 5.5V). Adjust P5 whilst increasing the input voltage The Vop_rail will clamp at a maximum of 5.5V when properly adjusted. Warning IT IS IMPERATIVE THAT THE Vop_rail NOT EXCEED 5.5V !!!! Tip In the LVR monitor software this voltage rail is denoted as V_OPAMP_RAIL , because this is the input voltage used to power OpAmps (operational amplifiers) on the board and ccms. Program the FPGA Turn power off Connect jumpers between J22 (near ch8) pins 2 & 4 ( V_pump ) and between J22 pins 1 & 3 ( V_jtag ). Connect programmer to J17 (back of the board, center). Turn power on Initiate the program sequence If no program has been loaded onto the FPGA, go to Open Project, otherwise continue to 5. Inside the LVR folder select the program you want to run (this is already pre-loaded) Go to Configure Device Click Browse, and select the file v1-0e_lvr_fw.stp Set MODE to basic (should be default), and set ACTION to program Once that is complete, click PROGRAM Check in the log that the auto-verify ran successfully. Turn off power and install CCMs Set dip switch configuration for undervoltage lockout and overtemp lockout Locate dip switches SW6[A,B,C,D]. Note the side of the switch body labeled ON. Set the 3 rd switch to ON . Leave others OFF . Locate the switch labeled SW1. Set the 4 th switch to ON . Leave others OFF . Locate the switches on the back of the regulator (SW2-5) Set SW5 to [ OFF, OFF, OFF, OFF ] For SW4, for each channel pair that has a master-slave pair, set each corresponding pin to OFF if a slave is present in the channel pair, otherwise set to ON SW4 switcher Channels 1 CH1 & 2 2 CH3 & 4 3 CH5 & 6 4 CH7 & 8 Set SW2 and SW3 to [ OFF, OFF, OFF, OFF ] Note that the ON position is labelled opposite the numbered slots (1, 2, 3, 4) Additionally, note that if you wish the board to be in pulsed duty cycle, set SW3 pin 1 to OFF , otherwise keep pin at ON . For most of the QA sequence it will be more useful in ON Undervoltage Lockout test Set input power to ~4.8 V Reduce the input power gradually, and confirm that the outputs shut off below 4.5-4.6 volts (ish). Info To test individual undervoltage lockouts (if needed) use the following procedure Locate SW6[A, B, C, D]. The switcher-channel correspondence is given in the table below For each SW6#, verify that its corresponding channels shut off when turning the switch configuration to [ OFF, OFF, OFF, OFF ] Each channel should switch from some voltage (depending on power supply setting) to ~0V. SW6 switcher Channels SW6A CH7 & 8 SW6B CH5 & 6 SW6C CH3 & 4 SW6D CH1 & 2 Overtemperature lockout test Locate SW1. Set SW1 to [ ON, ON, ON, ON ]. Info This tells the board that it should shut down if it gets above ~ 20C (room temperature). Locate LD7 (bottom left corner of LVR). Verify LD7 is ON . Verify all V_OUT channel values as shown on monitor go to ~0V. Set SW1 back to nominal [ OFF, OFF, OFF, ON ] Note The output voltages in each channel will be slightly higher than that of the CCM voltage. 25 CCMs output ~2.7V, 15 output ~1.7 V, 12 output ~1.4 V Output standby configuration. Adjust the Voltage offsets at the following test point pairs using the following variable resistors CH 4-1: TP9 ( Vos_gen ) and TP10 (GND) CH 8-5: TP14 ( Vos_gen ) and TP15 (GND) Adjust P3 and P4 on each respective side of the board in order to configure the voltages. (They are beside the testpoints. You can remove the nearby CCM if it gets in your way) Note Each 4-channel group must be set to operate with the same output voltage according to what kind of CCM it will host as shown below: Vos [V] Vccm [V] 1.775 2.5 1.546 1.5 1.483 1.225 Use the RJ45 breakout board to perform the sense line test. Verify that the voltage of a channel goes to RAIL when the corresponding sense lines are shorted to each other. The sense lines are mapped to the RJ45 as follows: Channels Pins RJ45 Connector CH1 1 & 2 Right (J10) CH2 (if 12/25A) 4 & 5 Right (J10) CH3 3 & 6 Right (J10) CH4 (if 12/25A) 7 & 8 Right (J10) CH5 1 & 2 Left (J16) CH6 (if 12/25A) 4 & 5 Left (J16) CH7 3 & 6 Left (J16) CH8 (if 12/25A) 7 & 8 Left (J16) Note Slave channels will not alter voltage when shorting those channels. They will only go to RAIL when shorting their respective master channels. SPI Communication test On the laptop's desktop, locate the \"SPI test\". Run this shortcut. The username and password are both 'spitest' The 4 bytes transmitted to the LVR are in the left column, the 4 received are on the right. You should see (possibly after 4-5 rounds of communication) that the message received from the LVR is the previous one that was sent. Finally, once communication is verified, connect the SPI_RESET line (floating green wire) to any GND test point on the LVR (the GND on the raspberry pi or the Rigol power supply also works in principle). The LVR should stop replying and you should read the response as all 00 00 00 00 until you allow the SPI_RESET to float once more. Example The following illustrates the kind of output you're looking for when communication is working: 04 04 04 04 03 03 03 03 05 05 05 05 04 04 04 04 06 06 06 06 05 05 05 05 07 07 07 07 06 06 06 06 If it is not already, set SW3 1 st switch to ON (takes regulator out of pulsed mode).","title":"LVR QA"},{"location":"minidaq/centos_tips/","text":"Downgrade a package If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name> Pinning a package to current version We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"CentOS tips"},{"location":"minidaq/centos_tips/#downgrade-a-package","text":"If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name>","title":"Downgrade a package"},{"location":"minidaq/centos_tips/#pinning-a-package-to-current-version","text":"We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"Pinning a package to current version"},{"location":"minidaq/minidaq_usage/","text":"Note This step is only needed after a power cycle or power outage. Load a firmware file This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files Configure MiniDAQ control software After programming the MiniDAQ FPGA, restart (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py Start the Project by going to going to Applications, WinCC, Project Administrator . From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Take the MiniDAQ. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3. nanoDAQ A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"MiniDAQ usage"},{"location":"minidaq/minidaq_usage/#load-a-firmware-file","text":"This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files","title":"Load a firmware file"},{"location":"minidaq/minidaq_usage/#configure-minidaq-control-software","text":"After programming the MiniDAQ FPGA, restart (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py Start the Project by going to going to Applications, WinCC, Project Administrator . From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Take the MiniDAQ. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3.","title":"Configure MiniDAQ control software"},{"location":"minidaq/minidaq_usage/#nanodaq","text":"A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"nanoDAQ"}]}