{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation site for UT electronic boards designed by UMD LHCb group.","title":"Getting started"},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2019, UMD LHCb group All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"dcb/dcb_assembly/dcb_assembly/","text":"Visual inspection of new DCB Record serial number from sticker on the DCB to the database and put a new label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted. Install thermal gap filler on the DCB backplate There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB. Install the heat pipe on the DCB backplate To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear. Optical Mezzanines Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx. An assembled mezzanine will look like this, where the yellow component in a VTTx. Note A VTTx is yellow while a VTRx is red . They look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs Final assembly Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3,2-4 J4 pins 3-4 J10 pins 3-4,5-6 J12 1-2,3-4,5-6 J13 1-3,2-4 Continuity check Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"DCB mechanical assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#visual-inspection-of-new-dcb","text":"Record serial number from sticker on the DCB to the database and put a new label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted.","title":"Visual inspection of new DCB"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-thermal-gap-filler-on-the-dcb-backplate","text":"There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB.","title":"Install thermal gap filler on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-the-heat-pipe-on-the-dcb-backplate","text":"To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear.","title":"Install the heat pipe on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#optical-mezzanines","text":"Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx. An assembled mezzanine will look like this, where the yellow component in a VTTx. Note A VTTx is yellow while a VTRx is red . They look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs","title":"Optical Mezzanines"},{"location":"dcb/dcb_assembly/dcb_assembly/#final-assembly","text":"Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3,2-4 J4 pins 3-4 J10 pins 3-4,5-6 J12 1-2,3-4,5-6 J13 1-3,2-4","title":"Final assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#continuity-check","text":"Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"Continuity check"},{"location":"dcb/dcb_qa/dcb_qa/","text":"Warning Make sure you are grounded at all times when handling the DCB! Failing to do so could destroy the boards! The DCB has a few purposes; aggregating data, controlling the stave, and monitoring. It has 4 optical mezzanines with 3 VTTxs and 1 VTRx, as well as 1 master GBTx, 1 GBT-SCA, and 6 data GBTxs. The DCB talks to the stave through the Backplane connecter and a computer through the mezzanines. The PRBS test checks the DCB ability to get data from the GBTxs to the computer. A psuedo-random bit sequence, or PRBS, is generated in the data GBTxs and sent to our computer via the VTTxs. This test verifies the black data lines on the image. In the SALT test, we tell the stave what data to send to the DCB to check the grey data lines. Each line represents 12 E-links connecting the stave to the GBTxs. For our tests, we have the stave sending \"c4\" repeated to the DCB. It is easy for this to get out of phase, which is why we accept any stable data in the memory monitor as a success. To see possible out-of-phase responses, you can break \"c4\" into 8bit binary, shift it one bit left or right, then make it hex again. We check the DCB control of the stave by testing TFC loopback, where a GBTx sends a header of 04 to the stave. We know the E-links will be good as they have just been checked, so we expect to see the stave repeating 04 back to us if everything is working correctly. It is also fine here to see a bit-shift, making it look like the stave is repeating 01, 02, or 08. There are also ADCs (analog to digital converters) we look at to verify the power and, for the ones attached to thermistors, monitor the temperature on the DCB itself and the stave. Note Make sure to keep the database up to date as you go through the tests. Fusing GBTx Verify the jumper on J2, next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB. It goes over the outline with the label \"OMDBMC\". Don't worry about srewing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attatched. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under C:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2. Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now click select all , check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Shut off power to the DCB and move the right jumper on J2 up one to be inline with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green Add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector \"OMDBMC\" Setting up DCB Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection, Not sure if this is a necessary step will either be JD10 or JD11 Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in. Checking Power There are 3 seperate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10, and B goes to the odd board, JD11. It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQby going to Applications , WinCC , Project Administrator , then double click on the top project. Programming Data GBTxs There are 6 data GBTxs on each DCB, and these must be programed everytime the board gets power cycled. Note NanoDAQ has some documentation here. A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here. In the nanoDAQ command prompt, we're going to pull the reset, also called gpio, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier. PRBS Test Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" SALT Testing For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, it doesn't matter which one you double click. In nanoDAQ, type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are a stable bit shift of C4. Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using \"-s 2\" Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are a stable bit shift of C4. Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using \"-s 4\" Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14 TFC Test Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating ADC Read Out If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows - PC: UMDlab, GBT ID: 0, SCA ID: 0, Version: 2 For now, set address to \"Read Channel\" and line to 24 then 25. Clicking read on the right updates the \"Data out\" field. Line 24 should be around 0.5 and line 25 should be around 0.833 If you're getting an error, try clicking \"Activate Channel\" then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to \"Current Source\" and put FFFFFFFF (8 Fs) in \"Data in\", then click read/write Put address back to \"Read Channel\" and check lines 0, 1, 16, 17, and 18 by clicking read and looking at \"Data in\" Line 0 expected value is 0.53 Other lines expected value 0.15 Optical to Master GBT We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from \"J4\" on the DCB, directly under an optical mezzanine. It is also labeled \"MC CONFIGSELECT\" Set up GBT Client such that GBT ID:0, Device Address: 7, Register Address: 28, Size: 1 Click Read on the right and you should see 00 in \"Data out\" Put FF in \"Data in\" and click read/write \"Data out\" should now read FF","title":"DCB QA"},{"location":"dcb/dcb_qa/dcb_qa/#fusing-gbtx","text":"Verify the jumper on J2, next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB. It goes over the outline with the label \"OMDBMC\". Don't worry about srewing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attatched. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under C:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2. Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now click select all , check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Shut off power to the DCB and move the right jumper on J2 up one to be inline with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green Add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector \"OMDBMC\"","title":"Fusing GBTx"},{"location":"dcb/dcb_qa/dcb_qa/#setting-up-dcb","text":"Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection, Not sure if this is a necessary step will either be JD10 or JD11 Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in.","title":"Setting up DCB"},{"location":"dcb/dcb_qa/dcb_qa/#checking-power","text":"There are 3 seperate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10, and B goes to the odd board, JD11. It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQby going to Applications , WinCC , Project Administrator , then double click on the top project.","title":"Checking Power"},{"location":"dcb/dcb_qa/dcb_qa/#programming-data-gbtxs","text":"There are 6 data GBTxs on each DCB, and these must be programed everytime the board gets power cycled. Note NanoDAQ has some documentation here. A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here. In the nanoDAQ command prompt, we're going to pull the reset, also called gpio, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier.","title":"Programming Data GBTxs"},{"location":"dcb/dcb_qa/dcb_qa/#prbs-test","text":"Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\"","title":"PRBS Test"},{"location":"dcb/dcb_qa/dcb_qa/#salt-testing","text":"For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, it doesn't matter which one you double click. In nanoDAQ, type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are a stable bit shift of C4. Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using \"-s 2\" Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are a stable bit shift of C4. Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using \"-s 4\" Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14","title":"SALT Testing"},{"location":"dcb/dcb_qa/dcb_qa/#tfc-test","text":"Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating","title":"TFC Test"},{"location":"dcb/dcb_qa/dcb_qa/#adc-read-out","text":"If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows - PC: UMDlab, GBT ID: 0, SCA ID: 0, Version: 2 For now, set address to \"Read Channel\" and line to 24 then 25. Clicking read on the right updates the \"Data out\" field. Line 24 should be around 0.5 and line 25 should be around 0.833 If you're getting an error, try clicking \"Activate Channel\" then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to \"Current Source\" and put FFFFFFFF (8 Fs) in \"Data in\", then click read/write Put address back to \"Read Channel\" and check lines 0, 1, 16, 17, and 18 by clicking read and looking at \"Data in\" Line 0 expected value is 0.53 Other lines expected value 0.15","title":"ADC Read Out"},{"location":"dcb/dcb_qa/dcb_qa/#optical-to-master-gbt","text":"We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from \"J4\" on the DCB, directly under an optical mezzanine. It is also labeled \"MC CONFIGSELECT\" Set up GBT Client such that GBT ID:0, Device Address: 7, Register Address: 28, Size: 1 Click Read on the right and you should see 00 in \"Data out\" Put FF in \"Data in\" and click read/write \"Data out\" should now read FF","title":"Optical to Master GBT"},{"location":"lvr/ccm_id/","text":"CCM identification field guide To identify the type of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: 104 = 1.2V output 203 = 1.5V output 502 = 2.5V output To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1] An example identification is shown in the picture.","title":"CCM Identification Guide"},{"location":"lvr/ccm_id/#ccm-identification-field-guide","text":"To identify the type of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: 104 = 1.2V output 203 = 1.5V output 502 = 2.5V output To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1] An example identification is shown in the picture.","title":"CCM identification field guide"},{"location":"lvr/ccmqa/","text":"CCM QA Procedure This procedure acts under the assumption that the user is utilizing the pre-built CCM QA setup. Turn on both oscilloscopes connected to the LVR Take a master slave CCM pair a. Validate that the pair are both either 1.2, 1.5, or 2.5 V Install the CCM master-slave pair on channels 1 & 2 of the LVR. a. Note that in the case of a master-slave pair, you CANNOT install 2 masters or 2 slaves on the same 2-channel pair Set the input voltage of the power supply to \\~5.5 V Note the wave pattern on the first oscilloscope displaying 4 distinct channels. a. Note that channels 1 and 2 correspond to the master, where channels 3 and 4 correspond to the slave. The waveform displayed should be a smooth curve as shown in the figure above. Locate the variable resistor on the master CCM, and note the voltage reading on channel 1 of the second oscilloscope, denoted Vtop. Adjust the variable resistor so the voltage reading of channel 1 corresponds to the voltage of the CCM (i.e. a 1.5 V CCM should have a channel reading of \\~1.5 V) as shown below for a 1.5 V CCM After adjusting the variable resistor, go back to the first oscilloscope readings If the waveform displayed is still not smooth, note the following a. If the bottom two curves ONLY are not smooth, this indicates a problem with the slave b. If BOTH curves are not smooth, replace the master CCM with a validated master CCM with the same voltage identity. i. If after replacing the curve is smooth and normal, the previous master CCM has a problem ii. If after replacing the bottom curve is not smooth, this indicates a problem with the previous master CCM and the current slave CCM","title":"CCM QA"},{"location":"lvr/ccmqa/#ccm-qa-procedure","text":"This procedure acts under the assumption that the user is utilizing the pre-built CCM QA setup. Turn on both oscilloscopes connected to the LVR Take a master slave CCM pair a. Validate that the pair are both either 1.2, 1.5, or 2.5 V Install the CCM master-slave pair on channels 1 & 2 of the LVR. a. Note that in the case of a master-slave pair, you CANNOT install 2 masters or 2 slaves on the same 2-channel pair Set the input voltage of the power supply to \\~5.5 V Note the wave pattern on the first oscilloscope displaying 4 distinct channels. a. Note that channels 1 and 2 correspond to the master, where channels 3 and 4 correspond to the slave. The waveform displayed should be a smooth curve as shown in the figure above. Locate the variable resistor on the master CCM, and note the voltage reading on channel 1 of the second oscilloscope, denoted Vtop. Adjust the variable resistor so the voltage reading of channel 1 corresponds to the voltage of the CCM (i.e. a 1.5 V CCM should have a channel reading of \\~1.5 V) as shown below for a 1.5 V CCM After adjusting the variable resistor, go back to the first oscilloscope readings If the waveform displayed is still not smooth, note the following a. If the bottom two curves ONLY are not smooth, this indicates a problem with the slave b. If BOTH curves are not smooth, replace the master CCM with a validated master CCM with the same voltage identity. i. If after replacing the curve is smooth and normal, the previous master CCM has a problem ii. If after replacing the bottom curve is not smooth, this indicates a problem with the previous master CCM and the current slave CCM","title":"CCM QA Procedure"},{"location":"lvr/lvrconfig/","text":"Abstract The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible. Channel Sense lines If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: CH1 & CH5 use pins 1&2, CH2 & CH6 use pins 4&5, CH3 & CH7 use pins 3&6, CH4 & CH8 use pins 7&8 Setting Up Monitor/Programmer This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: a. Turn power off b. Connect jumpers between J22 pins 2 & 4 (V_pump) c. Connect jumpers between J22 pins 1 & 3 (V_jtag) d. Connect programmer to J17. e. Turn power on f. Initiate the program sequence g. Move jumpers on J22 to connect pins 4&6 and pins 3&5 To set up the monitor: a. Connect Raspberry PI leads to J18. Note that leads must start at pin row 3-4, not 1-2 b. Turn on raspberry PI and run code c. V_SENSE refers to the output feedback voltage from the CCM d. V_REGUL_OUT refers to full input voltage e. i_SENSE_MON refers to current through resistor ____ Fuse/Channel Configuration This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: The fuse labeled F3-4 serves ch5+ch6, the fuse labeled F1-2 serves ch7+ch8, the fuse labeled F7-8 serves ch1+ch2, the fuse labelled F5-6 serves ch3+ch4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB->MSB, with the fourth toggle putting the channel in an 'always on' state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts. Configuration of LVR LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8 Normal versus Duty Cycle Mode For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every \\~3 seconds that appears to last for \\~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than \\~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR. Master/slave pairings Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be 'notified' which channels are M+S pairs, via SW4. The \"off\" setting of the switch corresponds to a M+S pair, while the \"ON\" state is the setting for two single masters SW4-1 corresponds to 1-2, SW4-2 to 3-4, SW4-3 to 5-6, SW4-4 to 7-8 Note that when setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note: In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom\\'s notes on the configuration switches for the LVR, including master/slave and general enables. **IMPORTANT** THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \\\"ON\\\" ON THE SWITCH IS LOGIC 0 AND \\\"OFF\\\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5, and NOT 2,3,4,5 Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8. Overtemperature/Undervoltage Lockout The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB->MSB) 0101 -- regulator shuts off at 39C 1101 -- regulator shuts off at 30C 1001 -- regulator shuts off at 55C 0001 -- regulator shuts off at 70C The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: [0,0,0] - 5.9 V [1,0,0] - 5.4 V [0,1,0] - 5.1 V [0,0,1] - 4.6 V [1,1,0] - 5.1 V [0,1,1] - 4.1 V [1,1,1] - 3.9 V [1,0,1] - 4.6 V","title":"LVR Configuration"},{"location":"lvr/lvrconfig/#abstract","text":"The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible.","title":"Abstract"},{"location":"lvr/lvrconfig/#channel-sense-lines","text":"If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: CH1 & CH5 use pins 1&2, CH2 & CH6 use pins 4&5, CH3 & CH7 use pins 3&6, CH4 & CH8 use pins 7&8","title":"Channel Sense lines"},{"location":"lvr/lvrconfig/#setting-up-monitorprogrammer","text":"This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: a. Turn power off b. Connect jumpers between J22 pins 2 & 4 (V_pump) c. Connect jumpers between J22 pins 1 & 3 (V_jtag) d. Connect programmer to J17. e. Turn power on f. Initiate the program sequence g. Move jumpers on J22 to connect pins 4&6 and pins 3&5 To set up the monitor: a. Connect Raspberry PI leads to J18. Note that leads must start at pin row 3-4, not 1-2 b. Turn on raspberry PI and run code c. V_SENSE refers to the output feedback voltage from the CCM d. V_REGUL_OUT refers to full input voltage e. i_SENSE_MON refers to current through resistor ____","title":"Setting Up Monitor/Programmer"},{"location":"lvr/lvrconfig/#fusechannel-configuration","text":"This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: The fuse labeled F3-4 serves ch5+ch6, the fuse labeled F1-2 serves ch7+ch8, the fuse labeled F7-8 serves ch1+ch2, the fuse labelled F5-6 serves ch3+ch4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB->MSB, with the fourth toggle putting the channel in an 'always on' state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts.","title":"Fuse/Channel Configuration"},{"location":"lvr/lvrconfig/#configuration-of-lvr","text":"LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8","title":"Configuration of LVR"},{"location":"lvr/lvrconfig/#normal-versus-duty-cycle-mode","text":"For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every \\~3 seconds that appears to last for \\~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than \\~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR.","title":"Normal versus Duty Cycle Mode"},{"location":"lvr/lvrconfig/#masterslave-pairings","text":"Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be 'notified' which channels are M+S pairs, via SW4. The \"off\" setting of the switch corresponds to a M+S pair, while the \"ON\" state is the setting for two single masters SW4-1 corresponds to 1-2, SW4-2 to 3-4, SW4-3 to 5-6, SW4-4 to 7-8 Note that when setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note: In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom\\'s notes on the configuration switches for the LVR, including master/slave and general enables. **IMPORTANT** THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \\\"ON\\\" ON THE SWITCH IS LOGIC 0 AND \\\"OFF\\\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5, and NOT 2,3,4,5 Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8.","title":"Master/slave pairings"},{"location":"lvr/lvrconfig/#overtemperatureundervoltage-lockout","text":"The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB->MSB) 0101 -- regulator shuts off at 39C 1101 -- regulator shuts off at 30C 1001 -- regulator shuts off at 55C 0001 -- regulator shuts off at 70C The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: [0,0,0] - 5.9 V [1,0,0] - 5.4 V [0,1,0] - 5.1 V [0,0,1] - 4.6 V [1,1,0] - 5.1 V [0,1,1] - 4.1 V [1,1,1] - 3.9 V [1,0,1] - 4.6 V","title":"Overtemperature/Undervoltage Lockout"},{"location":"lvr/lvrqa/","text":"LVR QA Procedure Note the following before beginning QA procedures: a) Beware that TP5 is not GND. The silkscreen label applies to the adjacent TP2. b) Fused power input breakout board silk screen circuit labels are incorrect. c) The LVR outputs should be connected to a benign load that can withstand having upwards of 7v output. (ie the LVR channel outputs follow the input power rail if the CCM is not populated and configured.) d) Extreme caution is needed when connecting test lead clips to the test points. a. The test points are rather fragile and easily pulled of the board. b. Care must be taken to avoid temporary unintended shorts from the high density of surrounding components, via's, and traces. e) When configuring the CCMs on the LVR, remember that CCM voltage types split down the middle of the LVR (i.e. CH1-4 must have the same CCM voltage, CH5-8 must have the same CCM voltage) f) Going down the board on one side, arrange CCMs as master, slave, master, slave, etc. g) The Master-Slave configurations require a jumper ON the LVR output breakout board that electrically connects the master and slave output rails together. Full QA Procedure: 1) Note Serial Number of LVR and CCM before beginning QA 2) Verify that the chassis and power ground are isolated > 25K Ohms. a. Measure input voltage at the large lugs at the top of the board b. Use any GND TP on the board (i.e. TP7) 3) Activate the LVR monitor a. Go to PuTTY and select Monitor Pi b. Password is lvr 4) Set power supply initially to 1.6 V and the current limited to 1.5 A 5) Connect up power with any number of channels (ideally since all channels are being tested you should put fuses in all slots, however in principal it does not matter which channel you select) a. Verify voltage polarity of connections 6) Place a DVM (DC Voltage Meter) between TP3 (3.3V) and TP6 (GND) to monitor the 3.3v rail 7) Place another DVM between TP8 (1.5V) and TP6 (GND) to monitor the 1.5v rail Note you can also use the LVR monitor for this section, looking at the Vin_FPGA_3V3 and Vin_FPGA_1V5 readings 8) Slowly increase the input voltage from the initial 1.6V to a max of 4.5V while monitoring the 3.3v and 1.5v rails to make sure they stay below the max values. STOP IF VALUES BELOW ARE EXCEEDED to prevent damage. a. 1.5V x 110% = 1.65V b. 3.3V x 110% = 3.63V 9) Adjust p1 to obtain 1.50 v on TP8. 10) Adjust p2 to obtain 3.3v on TP3. 11) Re-verify both the 3.3v and 1.5v rails are correct. \u03c3~V~ should be at most 0.01 V. 12) Record input current 13) Place a DVM between TP4 (Vop_rail) and TP7 (GND) 14) Slowly increase the input voltage to 7V until EITHER the Vop_rail stops increasing or hits 5.5V. a. **IT IS IMPERATIVE THAT THE Vop\\_rail NOT EXCEED 5.5V !!!!** b. Adjust P5 whilst increasing the input voltage c. The Vop\\_rail will clamp at a maximum of 5.5V when properly adjusted. Note you can also use the monitor to view Op Rail voltage (denoted as V_OPAMP_RAIL) 15) PROGRAM THE FPGA ```{=html} a. Turn power off b. Connect jumpers between J22 pins 2 & 4 (V\\_pump) and between J22 pins 1 & 3 (V\\_jtag) c. Connect programmer to J17. d. Turn power on e. Initiate the program sequence i. If no program has been loaded onto the FPGA, go to Open Project ii. Inside the LVR folder select the program you want to run iii. Go to Configure Device iv. Click Browse, and select the .pdb file you wish to use to program v. Set MODE to basic, and set ACTION to program vi. Once that is complete, click PROGRAM f. Record checksum when program is done i. Checksum = \\_\\_\\_\\_\\_\\_\\_ g. Move jumpers on J22 to connect pins 4&6 and pins 3&5 16) Set dip switch configuration for undervoltage lockout and overtemp lockout a. Locate dip switches SW6\\[A,B,C,D\\]. Note the side of the switch body labeled ON. i. Set the 3^rd^ switch to ON. Leave others OFF b. Locate the switch labeled SW1 i. Set the 4^th^ switch to ON. Leave others OFF c. Locate the switches on the back of the regulator (SW2-5) i. Set SW5 to \\[OFF, OFF, OFF, OFF\\] ii. For SW4, for each channel pair that has a master-slave pair, set each corresponding pin to OFF if a slave is present in the channel pair, otherwise set to ON 1. 1 -\\> CH1+2, 2 -\\> CH3+4, 3 -\\> CH5+6, 4 -\\> CH7+8 iii. Set SW2 and 3 to \\[OFF, OFF, OFF, OFF\\] d. Note that the ON position is labelled opposite the numbered slots (1, 2, 3, 4) e. Additionally, note that if you wish the board to be in pulsed duty cycle, set SW3 pin 1 to OFF, otherwise keep pin at ON ![](lvrqa3.png) ![](lvrqa4.png) ![](lvrqa5.png) 17) Undervoltage Lockout test a. Set input power to \\~4.8 V ```{=html} <!-- --> ``` a. Locate SW6\\[A, B, C, D\\] i. SW6A -\\> CH7 + CH8 ii. SW6B -\\> CH5 + CH6 iii. SW6C -\\> CH3 + CH4 iv. SW6D -\\> CH1 + CH2 b. For each SW6\\#, verify that its corresponding channels shut off when turning the switch configuration to \\[OFF, OFF, OFF, OFF\\] c. Each channel should switch from some voltage (depending on power supply setting) to \\~0V 18) Overtemperature lockout test ```{=html} <!-- --> a. Locate SW1 b. Set SW1 to [ON, ON, ON, ON] i. This tells the board to lockout at room temperature c. Locate LD7 (bottom left corner of LVR) d. Verify LD7 is ON e. Verify all V_OUT channel values as shown on monitor go to \\~0V ```{=html} 19) Output standby configuration. Adjust the Voltage offsets at the following TP pairs using the following variable resistors a. CH 4 to 1: TP9 (Vos\\_gen) and TP10(GND) b. CH 8 to 5: TP14 (Vos\\_gen) and TP15(GND) c. Adjust P3 and P4 on each respective side of the board in order to configure the voltages. ```{=html} <!-- --> i. EACH 4-channel group must be set to operate with the same output voltage as shown below: Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case 20) Use the RJ45 breakout board to perform the sense line test ```{=html} a. Verify that the peak voltage goes to RAIL when the following sense lines are shorted to each other. Recall that on the respective ethernet connectors: i. CH1 & CH5 are pins 1&2, ii. CH2 & CH6 are pins 4&5 iii. CH3 & CH7 are pins 3&6 iv. CH4 & CH8 are pins 7&8 ```{=html} <!-- --> ``` a. Note that slave channels will not alter voltage when shorting those channels. They will only go to RAIL when shorting their respective master channels. ```{=html} <!-- --> 21) Set SW2 1^st^ switch to ON (takes regulator out of pulsed mode)","title":"LVR QA"},{"location":"lvr/lvrqa/#lvr-qa-procedure","text":"Note the following before beginning QA procedures: a) Beware that TP5 is not GND. The silkscreen label applies to the adjacent TP2. b) Fused power input breakout board silk screen circuit labels are incorrect. c) The LVR outputs should be connected to a benign load that can withstand having upwards of 7v output. (ie the LVR channel outputs follow the input power rail if the CCM is not populated and configured.) d) Extreme caution is needed when connecting test lead clips to the test points. a. The test points are rather fragile and easily pulled of the board. b. Care must be taken to avoid temporary unintended shorts from the high density of surrounding components, via's, and traces. e) When configuring the CCMs on the LVR, remember that CCM voltage types split down the middle of the LVR (i.e. CH1-4 must have the same CCM voltage, CH5-8 must have the same CCM voltage) f) Going down the board on one side, arrange CCMs as master, slave, master, slave, etc. g) The Master-Slave configurations require a jumper ON the LVR output breakout board that electrically connects the master and slave output rails together. Full QA Procedure: 1) Note Serial Number of LVR and CCM before beginning QA 2) Verify that the chassis and power ground are isolated > 25K Ohms. a. Measure input voltage at the large lugs at the top of the board b. Use any GND TP on the board (i.e. TP7) 3) Activate the LVR monitor a. Go to PuTTY and select Monitor Pi b. Password is lvr 4) Set power supply initially to 1.6 V and the current limited to 1.5 A 5) Connect up power with any number of channels (ideally since all channels are being tested you should put fuses in all slots, however in principal it does not matter which channel you select) a. Verify voltage polarity of connections 6) Place a DVM (DC Voltage Meter) between TP3 (3.3V) and TP6 (GND) to monitor the 3.3v rail 7) Place another DVM between TP8 (1.5V) and TP6 (GND) to monitor the 1.5v rail Note you can also use the LVR monitor for this section, looking at the Vin_FPGA_3V3 and Vin_FPGA_1V5 readings 8) Slowly increase the input voltage from the initial 1.6V to a max of 4.5V while monitoring the 3.3v and 1.5v rails to make sure they stay below the max values. STOP IF VALUES BELOW ARE EXCEEDED to prevent damage. a. 1.5V x 110% = 1.65V b. 3.3V x 110% = 3.63V 9) Adjust p1 to obtain 1.50 v on TP8. 10) Adjust p2 to obtain 3.3v on TP3. 11) Re-verify both the 3.3v and 1.5v rails are correct. \u03c3~V~ should be at most 0.01 V. 12) Record input current 13) Place a DVM between TP4 (Vop_rail) and TP7 (GND) 14) Slowly increase the input voltage to 7V until EITHER the Vop_rail stops increasing or hits 5.5V. a. **IT IS IMPERATIVE THAT THE Vop\\_rail NOT EXCEED 5.5V !!!!** b. Adjust P5 whilst increasing the input voltage c. The Vop\\_rail will clamp at a maximum of 5.5V when properly adjusted. Note you can also use the monitor to view Op Rail voltage (denoted as V_OPAMP_RAIL) 15) PROGRAM THE FPGA ```{=html} a. Turn power off b. Connect jumpers between J22 pins 2 & 4 (V\\_pump) and between J22 pins 1 & 3 (V\\_jtag) c. Connect programmer to J17. d. Turn power on e. Initiate the program sequence i. If no program has been loaded onto the FPGA, go to Open Project ii. Inside the LVR folder select the program you want to run iii. Go to Configure Device iv. Click Browse, and select the .pdb file you wish to use to program v. Set MODE to basic, and set ACTION to program vi. Once that is complete, click PROGRAM f. Record checksum when program is done i. Checksum = \\_\\_\\_\\_\\_\\_\\_ g. Move jumpers on J22 to connect pins 4&6 and pins 3&5 16) Set dip switch configuration for undervoltage lockout and overtemp lockout a. Locate dip switches SW6\\[A,B,C,D\\]. Note the side of the switch body labeled ON. i. Set the 3^rd^ switch to ON. Leave others OFF b. Locate the switch labeled SW1 i. Set the 4^th^ switch to ON. Leave others OFF c. Locate the switches on the back of the regulator (SW2-5) i. Set SW5 to \\[OFF, OFF, OFF, OFF\\] ii. For SW4, for each channel pair that has a master-slave pair, set each corresponding pin to OFF if a slave is present in the channel pair, otherwise set to ON 1. 1 -\\> CH1+2, 2 -\\> CH3+4, 3 -\\> CH5+6, 4 -\\> CH7+8 iii. Set SW2 and 3 to \\[OFF, OFF, OFF, OFF\\] d. Note that the ON position is labelled opposite the numbered slots (1, 2, 3, 4) e. Additionally, note that if you wish the board to be in pulsed duty cycle, set SW3 pin 1 to OFF, otherwise keep pin at ON ![](lvrqa3.png) ![](lvrqa4.png) ![](lvrqa5.png) 17) Undervoltage Lockout test a. Set input power to \\~4.8 V ```{=html} <!-- --> ``` a. Locate SW6\\[A, B, C, D\\] i. SW6A -\\> CH7 + CH8 ii. SW6B -\\> CH5 + CH6 iii. SW6C -\\> CH3 + CH4 iv. SW6D -\\> CH1 + CH2 b. For each SW6\\#, verify that its corresponding channels shut off when turning the switch configuration to \\[OFF, OFF, OFF, OFF\\] c. Each channel should switch from some voltage (depending on power supply setting) to \\~0V 18) Overtemperature lockout test ```{=html} <!-- --> a. Locate SW1 b. Set SW1 to [ON, ON, ON, ON] i. This tells the board to lockout at room temperature c. Locate LD7 (bottom left corner of LVR) d. Verify LD7 is ON e. Verify all V_OUT channel values as shown on monitor go to \\~0V ```{=html} 19) Output standby configuration. Adjust the Voltage offsets at the following TP pairs using the following variable resistors a. CH 4 to 1: TP9 (Vos\\_gen) and TP10(GND) b. CH 8 to 5: TP14 (Vos\\_gen) and TP15(GND) c. Adjust P3 and P4 on each respective side of the board in order to configure the voltages. ```{=html} <!-- --> i. EACH 4-channel group must be set to operate with the same output voltage as shown below: Vos Vout 1.775V 2.5V case 1.546V 1.5V case 1.483V 1.225V case 20) Use the RJ45 breakout board to perform the sense line test ```{=html} a. Verify that the peak voltage goes to RAIL when the following sense lines are shorted to each other. Recall that on the respective ethernet connectors: i. CH1 & CH5 are pins 1&2, ii. CH2 & CH6 are pins 4&5 iii. CH3 & CH7 are pins 3&6 iv. CH4 & CH8 are pins 7&8 ```{=html} <!-- --> ``` a. Note that slave channels will not alter voltage when shorting those channels. They will only go to RAIL when shorting their respective master channels. ```{=html} <!-- --> 21) Set SW2 1^st^ switch to ON (takes regulator out of pulsed mode)","title":"LVR QA Procedure"},{"location":"minidaq/centos_tips/","text":"Downgrade a package If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name> Pinning a package to current version We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"CentOS tips"},{"location":"minidaq/centos_tips/#downgrade-a-package","text":"If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name>","title":"Downgrade a package"},{"location":"minidaq/centos_tips/#pinning-a-package-to-current-version","text":"We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"Pinning a package to current version"},{"location":"minidaq/minidaq_usage/","text":"Load a firmware file This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files Reprogram the on-board flash memory This is the firmware that will be loaded by default on each fresh power-on. To do so: pcie40_pgm <path_to_pof_file> Note that here we need a pof file, not a sof file. Currently, we have some pof files in: /opt/lhcb/daq40/firmware Configure MiniDAQ control software After programming the MiniDAQ FPGA, reboot (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3. nanoDAQ A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"MiniDAQ usage"},{"location":"minidaq/minidaq_usage/#load-a-firmware-file","text":"This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files","title":"Load a firmware file"},{"location":"minidaq/minidaq_usage/#reprogram-the-on-board-flash-memory","text":"This is the firmware that will be loaded by default on each fresh power-on. To do so: pcie40_pgm <path_to_pof_file> Note that here we need a pof file, not a sof file. Currently, we have some pof files in: /opt/lhcb/daq40/firmware","title":"Reprogram the on-board flash memory"},{"location":"minidaq/minidaq_usage/#configure-minidaq-control-software","text":"After programming the MiniDAQ FPGA, reboot (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3.","title":"Configure MiniDAQ control software"},{"location":"minidaq/minidaq_usage/#nanodaq","text":"A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"nanoDAQ"}]}