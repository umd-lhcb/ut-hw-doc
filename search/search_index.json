{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation site for UT electronic boards designed by UMD LHCb group.","title":"Getting started"},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2019, UMD LHCb group All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"backplane/backplane_depop/","text":"JD depopulations For both true and mirror type, the depopulations are: F -> P: JD2,3 depopulate P -> D: JD10,11 depopulate JP depopulations True backplanes For F -> P: P1W P1E P2W P2E P3 P4 JP0 X O X X X JP1 X O O X X O JP2 X O O X X O JP3 X O X X X JP4 X O X X X JP5 X O X X JP6 X O X X JP7 X O X X X JP8 X X X X JP9 X X X JP10 X X X JP11 X X X X Note X : Hybrid is present on both F and P (but may depopulate a few elinks) O : Hybrid is depopulated on P blank: not present Info P1-P3 are on P2B2, except for JP11_P3 on Inner BB P4 are on Inner BB For P -> D: JP8-11 are all depopulated. Mirror backplanes Note From the True configuration shown above, the pigtails JP0-11 can be rearranged into the Mirror configuration by swapping: JP0/JP1 with JP2/JP3 JP4/JP5 with JP6/JP7 JP8/JP9 with JP10/JP11 For F -> P: P1W P1E P2W P2E P3 P4 JP0 X O O X X O JP1 X O X X X JP2 X O X X X JP3 X O O X X O JP4 X O X X JP5 X O X X X JP6 X O X X X JP7 X O X X JP8 X X X JP9 X X X X JP10 X X X X JP11 X X X Info P1-P3 are on P2B2, except for JP11_P3 on Inner BB P4 are on Inner BB For P -> D: JP8-11 are all depopulated, same as true.","title":"Backplane depopution"},{"location":"backplane/backplane_depop/#jd-depopulations","text":"For both true and mirror type, the depopulations are: F -> P: JD2,3 depopulate P -> D: JD10,11 depopulate","title":"JD depopulations"},{"location":"backplane/backplane_depop/#jp-depopulations","text":"","title":"JP depopulations"},{"location":"backplane/backplane_depop/#true-backplanes","text":"For F -> P: P1W P1E P2W P2E P3 P4 JP0 X O X X X JP1 X O O X X O JP2 X O O X X O JP3 X O X X X JP4 X O X X X JP5 X O X X JP6 X O X X JP7 X O X X X JP8 X X X X JP9 X X X JP10 X X X JP11 X X X X Note X : Hybrid is present on both F and P (but may depopulate a few elinks) O : Hybrid is depopulated on P blank: not present Info P1-P3 are on P2B2, except for JP11_P3 on Inner BB P4 are on Inner BB For P -> D: JP8-11 are all depopulated.","title":"True backplanes"},{"location":"backplane/backplane_depop/#mirror-backplanes","text":"Note From the True configuration shown above, the pigtails JP0-11 can be rearranged into the Mirror configuration by swapping: JP0/JP1 with JP2/JP3 JP4/JP5 with JP6/JP7 JP8/JP9 with JP10/JP11 For F -> P: P1W P1E P2W P2E P3 P4 JP0 X O O X X O JP1 X O X X X JP2 X O X X X JP3 X O O X X O JP4 X O X X JP5 X O X X X JP6 X O X X X JP7 X O X X JP8 X X X JP9 X X X X JP10 X X X X JP11 X X X Info P1-P3 are on P2B2, except for JP11_P3 on Inner BB P4 are on Inner BB For P -> D: JP8-11 are all depopulated, same as true.","title":"Mirror backplanes"},{"location":"burnin/box_algorithm/","text":"Box Algorithms General: if a box is full or missing, find a new box and put a post-it on it. Todo Inventory of boxes for shipping, want to pack one box of each type first. Box placement during the life of a DCB Take box out of original shipping boxes downstairs DCB ASSEMBLY Put in \"init QA\" box upstairs DCB INITIAL QA Put in \"To burn in\" boxes upstairs and downstairs DCB BURN IN Put in \"Burned in\" box upstairs DCB FINAL QA HALF Put in appropriate \"JP8/JP11 done\" box upstairs DCB FINAL QA OTHER HALF Put in \"Ready to ship\" box upstairs Box placement during the life of an LVR Bring original shipping box upstairs LVR INITIAL QA Put in \"to be assembled\" box downstairs LVR ASSEMBLY Put in \"awaiting burn-in\" box downstairs LVR BURN IN Put in \"Burned in\" box upstairs LVR FINAL QA Put in \"Ready to ship\" box upstairs Box Inventory DCBs Basement 1 burn in Lab 1 init QA 1 to burn in 1 jp8 done 1 jp10 done 1 burned in (small) 1 bad (small) 1 reset bad (small) 2 to be shipped LVRs Basement 1 to be assembled 1 awaiting burnin 1 ready to ship Lab 1 to be initial QAd 2 finished burn in (one may become a shipping box) 1 each small ready to ship and finished final QA","title":"Box algorithm"},{"location":"burnin/box_algorithm/#box-algorithms","text":"General: if a box is full or missing, find a new box and put a post-it on it. Todo Inventory of boxes for shipping, want to pack one box of each type first.","title":"Box Algorithms"},{"location":"burnin/box_algorithm/#box-placement-during-the-life-of-a-dcb","text":"Take box out of original shipping boxes downstairs DCB ASSEMBLY Put in \"init QA\" box upstairs DCB INITIAL QA Put in \"To burn in\" boxes upstairs and downstairs DCB BURN IN Put in \"Burned in\" box upstairs DCB FINAL QA HALF Put in appropriate \"JP8/JP11 done\" box upstairs DCB FINAL QA OTHER HALF Put in \"Ready to ship\" box upstairs","title":"Box placement during the life of a DCB"},{"location":"burnin/box_algorithm/#box-placement-during-the-life-of-an-lvr","text":"Bring original shipping box upstairs LVR INITIAL QA Put in \"to be assembled\" box downstairs LVR ASSEMBLY Put in \"awaiting burn-in\" box downstairs LVR BURN IN Put in \"Burned in\" box upstairs LVR FINAL QA Put in \"Ready to ship\" box upstairs","title":"Box placement during the life of an LVR"},{"location":"burnin/box_algorithm/#box-inventory","text":"","title":"Box Inventory"},{"location":"burnin/box_algorithm/#dcbs","text":"","title":"DCBs"},{"location":"burnin/box_algorithm/#basement","text":"1 burn in","title":"Basement"},{"location":"burnin/box_algorithm/#lab","text":"1 init QA 1 to burn in 1 jp8 done 1 jp10 done 1 burned in (small) 1 bad (small) 1 reset bad (small) 2 to be shipped","title":"Lab"},{"location":"burnin/box_algorithm/#lvrs","text":"","title":"LVRs"},{"location":"burnin/box_algorithm/#basement_1","text":"1 to be assembled 1 awaiting burnin 1 ready to ship","title":"Basement"},{"location":"burnin/box_algorithm/#lab_1","text":"1 to be initial QAd 2 finished burn in (one may become a shipping box) 1 each small ready to ship and finished final QA","title":"Lab"},{"location":"burnin/burnin_sw_setup/","text":"The software for the burn-in is divided into to parts: The sensor readout and hardware control are running on the Raspberry Pi The data collection of sensor readouts and data visualization are on Yipeng's desktop computer (referred as Julian in the following sections) Installation After clone the NeoBurnIn to the pi, run nix-shell in the project root. This will automatically install all required dependencies. Note The pi must be running on NixOS for nix-shell to work! Note After nix-shell finishes executing, you'll be dropped in a shell. Only in this shell one can run burn-in related scripts. Scripts to run on the Raspberry Pi To start the burn-in testing one should issue the command tmux and then open three separate panels using the key combination Ctrl+A+\" . One can open more panels if needed although three panels should be sufficient to run the burn-in: In the first panel, run CtrlServer.py using the command ./CtrlServer.py --config-file ./config/burn_in_ctrl_server.yml In the second panel, run CtrlClient.py using the command ./CtrlClient.py --config-file ./config/burn_in_ctrl_client.yml The third panel is reserved for interactive use, such as controlling the MARATON or USB relay. Note To navigate between tmux panels, type Ctrl+A+up/down arrow keys in order to move up/down between panels. To stop the burn-in testing, navigate to each tmux panel which is running and type Ctrl+C in order to issue a keyboard interrupt which will stop the code from running. After all codes are stopped, one can exit tmux panels by issuing the command exit within each panel. Warning The CtrlClient.py should be stoped after a burn-in is finished, to avoid collecting idle MARATON current readouts. Scripts to run on Julian Yipeng will take care of that. The gist is that DataServer.py and another data visualization script will be running on Julian Controlling the PSU (MARATON) with curl CtrlServer.py is required to control PSU remotely. To turn on/off a MARATON channel, use the commands curl -X POST http://192.168.1.30:45679/psu/192.168.1.31/<CHANNEL_NUMBER>/on curl -X POST http://192.168.1.30:45679/psu/192.168.1.31/<CHANNEL_NUMBER>/off Note <CHANNEL_NUMBER> is the number of the MARATON channel which one would like to turn on/off. There are 12 MARATON channels that can be turned on/off, ranging from channel 1 to channel 12. If changing the MARATON channel on/off is successful then the terminal will output Success and the LEDs on the LVRs for that MARATON channel will turn on/off respectively. Warning WEINER control software on Windows numbers MARATON channel in a different way: Starting from 0 to 11 (instead of 1 to 12). This means that issuing the curl command to turn on channel 1 will turn on the channel labeled 0 on the WEINER control software. If one is not using the WEINER control software to monitor the MARATON channels then do not worry about this numbering offset. Controlling the USB relay with curl CtrlServer.py is required to control PSU remotely. To turn on/off a USB relay channel, use the commands after checking the dynamic address curl -X POST http://192.168.1.30:45679/relay/0001:0004:00/<CHANNEL_NUMBER>/on curl -X POST http://192.168.1.30:45679/relay/0001:0004:00/<CHANNEL_NUMBER>/off Note <CHANNEL_NUMBER> is the number of the USB relay channel which one would like to turn on/off. There are only two USB relay channels, channel 1 and channel 2, and only one channel will need to be turned on/off. This is because only one channel will be connected to a solenoid valve for the burn-in (as of 3/26/20). To see which channel one must turn on/off with curl commands one must inspect the hardware setup of the system, although the hardware should be setup such that the solenoid valve is connected to channel 2 of the USB relay. Warning The number 0001:0014:00 in the curl commands can change and one should check if this number has changed before issuing these curl commands. To check whether this number has changed: curl -X POST http://127.0.0.1:45679/relay/list This will list all of the device numbers for that USB port. There should only be one device listed which will be the USB relay.","title":"Burn-in software setup"},{"location":"burnin/burnin_sw_setup/#installation","text":"After clone the NeoBurnIn to the pi, run nix-shell in the project root. This will automatically install all required dependencies. Note The pi must be running on NixOS for nix-shell to work! Note After nix-shell finishes executing, you'll be dropped in a shell. Only in this shell one can run burn-in related scripts.","title":"Installation"},{"location":"burnin/burnin_sw_setup/#scripts-to-run-on-the-raspberry-pi","text":"To start the burn-in testing one should issue the command tmux and then open three separate panels using the key combination Ctrl+A+\" . One can open more panels if needed although three panels should be sufficient to run the burn-in: In the first panel, run CtrlServer.py using the command ./CtrlServer.py --config-file ./config/burn_in_ctrl_server.yml In the second panel, run CtrlClient.py using the command ./CtrlClient.py --config-file ./config/burn_in_ctrl_client.yml The third panel is reserved for interactive use, such as controlling the MARATON or USB relay. Note To navigate between tmux panels, type Ctrl+A+up/down arrow keys in order to move up/down between panels. To stop the burn-in testing, navigate to each tmux panel which is running and type Ctrl+C in order to issue a keyboard interrupt which will stop the code from running. After all codes are stopped, one can exit tmux panels by issuing the command exit within each panel. Warning The CtrlClient.py should be stoped after a burn-in is finished, to avoid collecting idle MARATON current readouts.","title":"Scripts to run on the Raspberry Pi"},{"location":"burnin/burnin_sw_setup/#scripts-to-run-on-julian","text":"Yipeng will take care of that. The gist is that DataServer.py and another data visualization script will be running on Julian","title":"Scripts to run on Julian"},{"location":"burnin/burnin_sw_setup/#controlling-the-psu-maraton-with-curl","text":"CtrlServer.py is required to control PSU remotely. To turn on/off a MARATON channel, use the commands curl -X POST http://192.168.1.30:45679/psu/192.168.1.31/<CHANNEL_NUMBER>/on curl -X POST http://192.168.1.30:45679/psu/192.168.1.31/<CHANNEL_NUMBER>/off Note <CHANNEL_NUMBER> is the number of the MARATON channel which one would like to turn on/off. There are 12 MARATON channels that can be turned on/off, ranging from channel 1 to channel 12. If changing the MARATON channel on/off is successful then the terminal will output Success and the LEDs on the LVRs for that MARATON channel will turn on/off respectively. Warning WEINER control software on Windows numbers MARATON channel in a different way: Starting from 0 to 11 (instead of 1 to 12). This means that issuing the curl command to turn on channel 1 will turn on the channel labeled 0 on the WEINER control software. If one is not using the WEINER control software to monitor the MARATON channels then do not worry about this numbering offset.","title":"Controlling the PSU (MARATON) with curl"},{"location":"burnin/burnin_sw_setup/#controlling-the-usb-relay-with-curl","text":"CtrlServer.py is required to control PSU remotely. To turn on/off a USB relay channel, use the commands after checking the dynamic address curl -X POST http://192.168.1.30:45679/relay/0001:0004:00/<CHANNEL_NUMBER>/on curl -X POST http://192.168.1.30:45679/relay/0001:0004:00/<CHANNEL_NUMBER>/off Note <CHANNEL_NUMBER> is the number of the USB relay channel which one would like to turn on/off. There are only two USB relay channels, channel 1 and channel 2, and only one channel will need to be turned on/off. This is because only one channel will be connected to a solenoid valve for the burn-in (as of 3/26/20). To see which channel one must turn on/off with curl commands one must inspect the hardware setup of the system, although the hardware should be setup such that the solenoid valve is connected to channel 2 of the USB relay. Warning The number 0001:0014:00 in the curl commands can change and one should check if this number has changed before issuing these curl commands. To check whether this number has changed: curl -X POST http://127.0.0.1:45679/relay/list This will list all of the device numbers for that USB port. There should only be one device listed which will be the USB relay.","title":"Controlling the USB relay with curl"},{"location":"burnin/dcb_operations/","text":"Stopping the DCB burn-in Execute burnin_read.sh . If any GBTxs don't report 03151515 , note the DCB in the database. If any DCBs don't respond at all, try resetting the SCA from the MiniDAQ SCA panel. Turn off Maraton channels 1, 2, and 12 and verify that all LEDs are off in the bottom SBC. Directions here . Turn off channels 1 and 2 of the Rigol power supply. Disconnect the optical fibers and pull-up harnesses from the DCBs. One by one, remove the DCBs from the crate, do a brief visual inspection and check their backplane connectors for damage, and put them in ESD bags. Update the database with burned-in DCBs. Starting the DCB burn-in Take an initial QA-d DCB out of it's ESD bag and do a brief visual inspection, checking the backplane connector for damage. One by one, plug DCBs into the crate, lifting the power wires out of the way. Info Slots 10 and 11 are unused, I recommend starting with Slot 0 on the right when facing the DCB. As you plug in each DCB, also plug the pull-up harness into the FFC connector of the Master GBTx (third from the top when plugged into the crate). After connecting each FFC, power on the appropriate Rigol channel and check that the current consumption increases by ~0.15A, then power it off. If not, re-seat the FFC cable. Power off the Rigol when all FFCs are successfully connected. After all DCBs are in the crate and the pull-up harnesses are successfully connected, connect the optical fibers to the Master GBTx mezzanines (third from the top when plugged into the crate). Info The fiber bundles are labeled 0-4 and 5-9, and the individual fibers are numbered from 1-12 in each bundle. Start with (1,2) for DCB 0, with 1 on top. Proceed with (3,4) etc. with the lower odd numbered fiber always on top. Fibers 11 and 12 are not used, so start over with (1,2) from the second bundle at DCB 5. Once all fibers are connected, power on Maraton channels 1, 2, and 12 and verify that the LEDs are on in the bottom SBC. Directions here Power on the Rigol. Open PuTTY, click on MiniDAQ, and navigate to the nanoDAQ directory. Because the DCB programming can be unreliable on the first tries after power-up, I suggest running ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 If there is an error, try again a few times. If programming has been stable you can skip this step. Once no error is observed you can program all of the data GBTxs with ./burnin_init.sh enable PRBS with ./burnin_prbs.sh and verify that the boards are properly configured with ./burnin_read.sh Check that each GBTx reports 03151515 . The burn-in is now running. Info If a DCB is not responding try reading from it individually with ./dcbutil.py read 1c 4 -g # The most common problems are that the SCA needs to be reset from the MiniDAQ SCA panel, and that the FFC cable needs to be reseated or even removed and the kapton insulation replaced (even if the current consumption for the reset line is correct). You can also try the following in no particular order: Reset the master with the RIGOL Reset the data GBTxs following the DCB QA instructions Power cycle the DCBs Reseat the FFC cables","title":"DCB burn-in operations"},{"location":"burnin/dcb_operations/#stopping-the-dcb-burn-in","text":"Execute burnin_read.sh . If any GBTxs don't report 03151515 , note the DCB in the database. If any DCBs don't respond at all, try resetting the SCA from the MiniDAQ SCA panel. Turn off Maraton channels 1, 2, and 12 and verify that all LEDs are off in the bottom SBC. Directions here . Turn off channels 1 and 2 of the Rigol power supply. Disconnect the optical fibers and pull-up harnesses from the DCBs. One by one, remove the DCBs from the crate, do a brief visual inspection and check their backplane connectors for damage, and put them in ESD bags. Update the database with burned-in DCBs.","title":"Stopping the DCB burn-in"},{"location":"burnin/dcb_operations/#starting-the-dcb-burn-in","text":"Take an initial QA-d DCB out of it's ESD bag and do a brief visual inspection, checking the backplane connector for damage. One by one, plug DCBs into the crate, lifting the power wires out of the way. Info Slots 10 and 11 are unused, I recommend starting with Slot 0 on the right when facing the DCB. As you plug in each DCB, also plug the pull-up harness into the FFC connector of the Master GBTx (third from the top when plugged into the crate). After connecting each FFC, power on the appropriate Rigol channel and check that the current consumption increases by ~0.15A, then power it off. If not, re-seat the FFC cable. Power off the Rigol when all FFCs are successfully connected. After all DCBs are in the crate and the pull-up harnesses are successfully connected, connect the optical fibers to the Master GBTx mezzanines (third from the top when plugged into the crate). Info The fiber bundles are labeled 0-4 and 5-9, and the individual fibers are numbered from 1-12 in each bundle. Start with (1,2) for DCB 0, with 1 on top. Proceed with (3,4) etc. with the lower odd numbered fiber always on top. Fibers 11 and 12 are not used, so start over with (1,2) from the second bundle at DCB 5. Once all fibers are connected, power on Maraton channels 1, 2, and 12 and verify that the LEDs are on in the bottom SBC. Directions here Power on the Rigol. Open PuTTY, click on MiniDAQ, and navigate to the nanoDAQ directory. Because the DCB programming can be unreliable on the first tries after power-up, I suggest running ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 If there is an error, try again a few times. If programming has been stable you can skip this step. Once no error is observed you can program all of the data GBTxs with ./burnin_init.sh enable PRBS with ./burnin_prbs.sh and verify that the boards are properly configured with ./burnin_read.sh Check that each GBTx reports 03151515 . The burn-in is now running. Info If a DCB is not responding try reading from it individually with ./dcbutil.py read 1c 4 -g # The most common problems are that the SCA needs to be reset from the MiniDAQ SCA panel, and that the FFC cable needs to be reseated or even removed and the kapton insulation replaced (even if the current consumption for the reset line is correct). You can also try the following in no particular order: Reset the master with the RIGOL Reset the data GBTxs following the DCB QA instructions Power cycle the DCBs Reseat the FFC cables","title":"Starting the DCB burn-in"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/","text":"The hardware system has four major components: MARATON power supply: Connected to the crate containing the LVRs and is used to provide power to the separate LVR channels. LVRs: Connected to the crate containing the switching load boards and have their output connected to the switching load boards. Switching load boards A single Raspberry Pi The latter two are the parts of the hardware configuration that require the most setup so they will each receive their own section. A picture of the final hardware configuration is shown below. Switching Load Board Setup The switching load boards are used to increase the current output by the LVRs. A picture of the board is shown below: From the picture there are two separate connections which will have pinouts to other hardware: The two pinouts on the upper left-side of the board ( P101 ) are labeled as V Opto Sec. 5V . These pinouts are connected to a function generator which provides a 5V DC connection to the switching load board. The positive and negative terminals connect to the respective positive and negative terminals of the function generator. The second connection are the two pinouts on the upper right-side of the board ( P102 ) which are labeled as RPi GPIO Control . The positive terminal of this connection connects to one of the many GPIO pins on the raspberry pi and the negative terminal connects to one the raspberry pi pins labeled GND . Any GPIO pins that occur on the pi at pins 11 or lower can not be connected to the switching load boards as these GPIO pins are reserved for other hardware. This will be further explained in the section describing the raspberry pi hardware setup. Additionally, a python script was made which will pull the GPIO pin connected to the switching load board high for 60 seconds, then pull the pin low for 10 seconds and repeat this process until the user interrupts this process (from Ctrl+C ). Pulling the GPIO pin high will power the switching load board and tell it to increase the current output by the LVRs. The python script will be described more with the other software below. Raspberry Pi Setup The single raspberry pi for the hardware is considered the brain of the system as this pi controls all of the software for the system and controls the power to the hardware. The raspberry pi for this system is version 3B+ and has a MicroSD card configured to run the NixOS operating system (Linux-based). The pi must be connected to a monitor and keyboard in order to control the system. Note The grounding for the pi is through the shield of the HDMI cord connecting the monitor to the pi. This means that the monitor conencted to the pi must have a three-prong power cord to ensure that all GNDs in the system are referencing the Earth GND. The raspberry pi controls most of the smaller hardware parts of the system including the USB relay (used to control the CP100 Rain Bird Solenoid Valve), the water alarm, the fire alarm and all of the thermistors. Note The power for the thermistors and the fire alarm both come from the 3.3V pin of the pi although there is only one 3.3V pin. To fix this we made a wire which starts at the 3.3V pin of the pi and forks out to make two connections. Warning There are actually two 3.3V pins on the raspberry pi, however the second 3.3V pin is not near the other power pins. Due to this, we decided to continue use of the forked connection as it is best to keep all power connections in one place. A picture of all connections to the raspberry pi GPIO pins is shown below. USB Relay and Solenoid Valve The USB relay and solenoid valve control the water flowing to the LVR crate. This water is used for cooling the crate if it gets too hot. A diagram of the circuit is shown below. The USB relay in this diagram would be connected to the raspberry pi via USB. Multiple solenoid valves can be inserted into this system although now we only have one solenoid valve in use as each solenoid valve in the system requires its own diode and normally open (NO) terminal. Water Alarm The water alarm is used to measure if water is leaking on the floor next to the crate containing the LVRs. This would occur if the tubes connected to the solenoid valve started to leak. If water is detected then the software will output a WATER message. The water alarm is a floor water sensor by Level Sense . The water alarm has a red wire, which is connected to one of the 5V connections on the pi, and a white wire, which is connected to pin 11 of the pi ( GPIO17 ) with a pull-down resistor of 4.7K. Fire Alarm The fire alarm is used to detect if smoke is rising from the crate containing the LVRs. If smoke is detected then the alarm will trigger and the software will output a FIRE message. The fire alarm has three connections to the pi. The grey wire from the alarm will connect to one of the GND pins of the pi. The blue wire from the alarm has two connections with a pull-down resistor connecting them. The red only wire soldered to the blue wire is the power for the alarm and is connected to one of the forked 3.3V connections. The red wire with black markings soldered to the blue wire is the control for the alarm and is connected to pin 8 ( GPIO14 ) of the pi. Thermistors The thermistors are used to measure the temperature of the LVRs being burned-in. The thermistors have their values averaged to obtain the nominal temperature of the crate. If the crate has a temperature of 30C or higher then the solenoid valve is turned to allow water to flow to the crate and aid in cooling the crate. Once the crate has a temperature of 29C or lower then the solenoid valve is turned off and water flow stops to ensure that the crate does not continue to cool. The thermistors all have their GND legs soldered to their VDD legs and are connected in parallel to each other via a breakout board connected to the pi. The breakout board has one rail for the GND connection of each thermistor and one rail for the data obtained by the thermistor. A diagram of the circuit is shown below. The connections to the pins of the pi in the diagram are the same as the connections to the pins of the pi in use for the burn-in. Warning It has been observed that the w1 devices ( /sys/bus/w1/devices/ ) lost connections with the pi for unknown reasons. If you see the error from CtrlClient.py : An error occurred when trying to read sensor: /sys/bus/w1/devices/28-0000098d8197/w1_slave or no temperature reading in logs/DataServer.log, try replugging the 3 GPIO connectors and the thermal sensor breakout board connectors.","title":"Burn-in hardware setup"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#switching-load-board-setup","text":"The switching load boards are used to increase the current output by the LVRs. A picture of the board is shown below: From the picture there are two separate connections which will have pinouts to other hardware: The two pinouts on the upper left-side of the board ( P101 ) are labeled as V Opto Sec. 5V . These pinouts are connected to a function generator which provides a 5V DC connection to the switching load board. The positive and negative terminals connect to the respective positive and negative terminals of the function generator. The second connection are the two pinouts on the upper right-side of the board ( P102 ) which are labeled as RPi GPIO Control . The positive terminal of this connection connects to one of the many GPIO pins on the raspberry pi and the negative terminal connects to one the raspberry pi pins labeled GND . Any GPIO pins that occur on the pi at pins 11 or lower can not be connected to the switching load boards as these GPIO pins are reserved for other hardware. This will be further explained in the section describing the raspberry pi hardware setup. Additionally, a python script was made which will pull the GPIO pin connected to the switching load board high for 60 seconds, then pull the pin low for 10 seconds and repeat this process until the user interrupts this process (from Ctrl+C ). Pulling the GPIO pin high will power the switching load board and tell it to increase the current output by the LVRs. The python script will be described more with the other software below.","title":"Switching Load Board Setup"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#raspberry-pi-setup","text":"The single raspberry pi for the hardware is considered the brain of the system as this pi controls all of the software for the system and controls the power to the hardware. The raspberry pi for this system is version 3B+ and has a MicroSD card configured to run the NixOS operating system (Linux-based). The pi must be connected to a monitor and keyboard in order to control the system. Note The grounding for the pi is through the shield of the HDMI cord connecting the monitor to the pi. This means that the monitor conencted to the pi must have a three-prong power cord to ensure that all GNDs in the system are referencing the Earth GND. The raspberry pi controls most of the smaller hardware parts of the system including the USB relay (used to control the CP100 Rain Bird Solenoid Valve), the water alarm, the fire alarm and all of the thermistors. Note The power for the thermistors and the fire alarm both come from the 3.3V pin of the pi although there is only one 3.3V pin. To fix this we made a wire which starts at the 3.3V pin of the pi and forks out to make two connections. Warning There are actually two 3.3V pins on the raspberry pi, however the second 3.3V pin is not near the other power pins. Due to this, we decided to continue use of the forked connection as it is best to keep all power connections in one place. A picture of all connections to the raspberry pi GPIO pins is shown below.","title":"Raspberry Pi Setup"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#usb-relay-and-solenoid-valve","text":"The USB relay and solenoid valve control the water flowing to the LVR crate. This water is used for cooling the crate if it gets too hot. A diagram of the circuit is shown below. The USB relay in this diagram would be connected to the raspberry pi via USB. Multiple solenoid valves can be inserted into this system although now we only have one solenoid valve in use as each solenoid valve in the system requires its own diode and normally open (NO) terminal.","title":"USB Relay and Solenoid Valve"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#water-alarm","text":"The water alarm is used to measure if water is leaking on the floor next to the crate containing the LVRs. This would occur if the tubes connected to the solenoid valve started to leak. If water is detected then the software will output a WATER message. The water alarm is a floor water sensor by Level Sense . The water alarm has a red wire, which is connected to one of the 5V connections on the pi, and a white wire, which is connected to pin 11 of the pi ( GPIO17 ) with a pull-down resistor of 4.7K.","title":"Water Alarm"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#fire-alarm","text":"The fire alarm is used to detect if smoke is rising from the crate containing the LVRs. If smoke is detected then the alarm will trigger and the software will output a FIRE message. The fire alarm has three connections to the pi. The grey wire from the alarm will connect to one of the GND pins of the pi. The blue wire from the alarm has two connections with a pull-down resistor connecting them. The red only wire soldered to the blue wire is the power for the alarm and is connected to one of the forked 3.3V connections. The red wire with black markings soldered to the blue wire is the control for the alarm and is connected to pin 8 ( GPIO14 ) of the pi.","title":"Fire Alarm"},{"location":"burnin/burnin_hw_setup/burnin_hw_setup/#thermistors","text":"The thermistors are used to measure the temperature of the LVRs being burned-in. The thermistors have their values averaged to obtain the nominal temperature of the crate. If the crate has a temperature of 30C or higher then the solenoid valve is turned to allow water to flow to the crate and aid in cooling the crate. Once the crate has a temperature of 29C or lower then the solenoid valve is turned off and water flow stops to ensure that the crate does not continue to cool. The thermistors all have their GND legs soldered to their VDD legs and are connected in parallel to each other via a breakout board connected to the pi. The breakout board has one rail for the GND connection of each thermistor and one rail for the data obtained by the thermistor. A diagram of the circuit is shown below. The connections to the pins of the pi in the diagram are the same as the connections to the pins of the pi in use for the burn-in. Warning It has been observed that the w1 devices ( /sys/bus/w1/devices/ ) lost connections with the pi for unknown reasons. If you see the error from CtrlClient.py : An error occurred when trying to read sensor: /sys/bus/w1/devices/28-0000098d8197/w1_slave or no temperature reading in logs/DataServer.log, try replugging the 3 GPIO connectors and the thermal sensor breakout board connectors.","title":"Thermistors"},{"location":"burnin/lvr_operations/lvr_operations/","text":"Overview Currently, LVR burn-in maximum capacity is 16 boards: 2 x 2V5 (using Switching Load Boards labeled 2V5) 14 x 1V2 / 1V5 (using the rest of Switching Load Boards) Each batch should be burned-in for 48 hrs, with switching loads and thermal cycles. The current profile is: switching between high current (2A) for 60s and low current (0.5A) for 10s Info So that voltage regulator chips are frequently exercised by changing states, while in typical operation (high current) most of the time bang-bang controlling board temperature between ~30C and ~50C Info For reference, constant-cooling equilibrium is ~30C and overtemperature lockout is 70C. Start burning in a new batch Inspect the \"ready for burn-in\" box and decide on the LVR types Update the database according to the selected LVRs' IDs Check to make sure that wedgelocks' allen heads are facing the output side, not the input side; and verify the switches as indicated in the table below. Order refers to toggles 1234 on the switch, with 1 meaning ON . (CCM) or (FPGA) refer to the side of the LVR the switch is on. There are four SW6 switches. Mount LVR in the SBC, and double-check that wedge locks are tightened Check the status of Maraton Warning If it's already running for DCB burn-in, be careful not to touch exposed live wires in the lower SBC Attach thermal sensors on 4 boards: put sensor's flat side against an open area of the board (without SMD componments) press the sticky putty to secure sensors in place you'll have more room to work with before installing adjacent boards Connect the output cables to LVR (the connectors should click), and verify that 2V5 switching load boards are connecting to two LVRs in Maraton channel 11. Info The output breakout boards are labeled for 2V5 Warning As you connect the output cables, take care not to pull thermal sensors away from the boards Now install the input breakout boards and grounding cables: move the horizontal bar back to make space for installation because there are 2 input breakout boards per Maraton channel, connect the pairs in order (e.g. from right to left) to not mix between channels input breakout boards are hard to secure even with the bar, so sometimes zip ties are needed (2V5 slots in particular) check that the cables to the input BBs are tightly connected to the block terminals (they gradually loosen and should be tightened again) after all boards are connected (some horizontal tilt unavoidable), push in the boards and fix the bar to keep boards in place (with quite some force, try starting from one end and push in one input BB at a time) double-check the connectors, especially for vertical tilt (resulting in partial connection) verify grounding cable connection Double-check that the chiller is on Turn on the Maraton Start running the python scripts as described in here Note that you need to use Ctrl + b then arrow to switch tmux panel You can use Ctrl + r to reverse search past command lines Turning on one Maraton channel (channel numbers are labeled on SBC) as described in here after issuing command, verify all LEDs are on: 1 in the front and 4 in the back . If not, turn off the channel and check connections (e.g. only 4 LVR channels on due to partial input connection). Often the last few channels (11,10,9) need adjusting input BB connections (e.g. pushing in more). use multimeter to spot check voltages across the output connector solder joints (or output breakout boards) -- should be the set voltage plus some drop (e.g. 1V5+0.2V) Repeat for other channels At this point, all LVRs are running with low currents, before load-switching (seeing 5 Ohm fixed load) Make sure that the Switching Load Boards' secondary voltage supply is on (5V, 0A), and the cooling fans are on In another panel, start running the SwLoadTest.py ( src/demo/SwLoadTest.py ) Note Verify the changing current (2A/0A) on the voltage supply Now Switching Load Boards are in working state, LVRs are changing between high/low-current states and heating up quickly Go to monitoring website and verify the temperature measurements (should be going up from ~30C) Monitor and wait for the upper temperature target (40C), and verify the USB relay switched on (click and red LED) Info Now valve is open for cooling water Use FLIR camera to check for abnormally hot (>60C) spots, both on the LVRs and the SLBs Give yourself a pat on the back -- burn-in has started Stop the burn-in Before turning off the Maraton channels, check that: In the web monitoring history, each Maraton channel's current did not deviate from its high and low values (e.g. reducing to half if 1 LVR stopped working) all 4 LEDs on the back are on (indicating all 8 LVR channels have been on). no hot spot >60C on FLIR Spot check voltages on output breakout boards, e.g. 1V5 + ~0.2V drop. Very carefully probe between two adjecent groups of pins on output connector (slowly move one probe at a time to avoid shorting). Will add picture here later. Turn off Maraton channels one by one. Note Verify that the front LEDs are off Stop the control and monitoring scripts ( CtrlServer.py , CtrlClient.py , SwLoadTest.py ) by Ctrl + C Note You need to use Ctrl + b then arrow to switch tmux panel Some transmission failure messages may have covered the panel running CtrlClient.py For future convenience: after scripts are stopped, Ctrl + L to clear, then up arrow to bring up the last command Note USB relay should be automatically set to open (no red LED on) when scripts are stopped, if the last measured temperature is higher than the lower target (31C). If relay is closed, the DC power supply will keep pushing the solenoid valve on (not ideal). To open it by command line, refer to the burn-in software doc. Disconnect the output cables and hang them by their clip on the red wire. Disconnect the input breakout boards (after moving the SBC bar) Note Check for loose connections to the terminal blocks (can gently pull to see if a wire is loose) Disconnect the grounding wires Loosen the wedge locks and take out LVRs. Detach the thermal sensors as space around LVR opens up. Warning Take care not to pull wires off the sensors' leads Note Wedge locks should be loose after 3 complete turns. If you still have trouble moving the LVR, make sure it's not blocked by the crate's bottom horizontal rail. Put the LVRs into ESD bags, and update the database Monitoring from off-campus To visit the monitoring website from off-campus, you can set up VPN this way: Install the VPN client software from UMD terpware . (You want to select your OS and find it under Network.) Login with your UMD account to connect to vpn.umd.edu (and select Group UMD)","title":"LVR burn-in operations"},{"location":"burnin/lvr_operations/lvr_operations/#overview","text":"Currently, LVR burn-in maximum capacity is 16 boards: 2 x 2V5 (using Switching Load Boards labeled 2V5) 14 x 1V2 / 1V5 (using the rest of Switching Load Boards) Each batch should be burned-in for 48 hrs, with switching loads and thermal cycles. The current profile is: switching between high current (2A) for 60s and low current (0.5A) for 10s Info So that voltage regulator chips are frequently exercised by changing states, while in typical operation (high current) most of the time bang-bang controlling board temperature between ~30C and ~50C Info For reference, constant-cooling equilibrium is ~30C and overtemperature lockout is 70C.","title":"Overview"},{"location":"burnin/lvr_operations/lvr_operations/#start-burning-in-a-new-batch","text":"Inspect the \"ready for burn-in\" box and decide on the LVR types Update the database according to the selected LVRs' IDs Check to make sure that wedgelocks' allen heads are facing the output side, not the input side; and verify the switches as indicated in the table below. Order refers to toggles 1234 on the switch, with 1 meaning ON . (CCM) or (FPGA) refer to the side of the LVR the switch is on. There are four SW6 switches. Mount LVR in the SBC, and double-check that wedge locks are tightened Check the status of Maraton Warning If it's already running for DCB burn-in, be careful not to touch exposed live wires in the lower SBC Attach thermal sensors on 4 boards: put sensor's flat side against an open area of the board (without SMD componments) press the sticky putty to secure sensors in place you'll have more room to work with before installing adjacent boards Connect the output cables to LVR (the connectors should click), and verify that 2V5 switching load boards are connecting to two LVRs in Maraton channel 11. Info The output breakout boards are labeled for 2V5 Warning As you connect the output cables, take care not to pull thermal sensors away from the boards Now install the input breakout boards and grounding cables: move the horizontal bar back to make space for installation because there are 2 input breakout boards per Maraton channel, connect the pairs in order (e.g. from right to left) to not mix between channels input breakout boards are hard to secure even with the bar, so sometimes zip ties are needed (2V5 slots in particular) check that the cables to the input BBs are tightly connected to the block terminals (they gradually loosen and should be tightened again) after all boards are connected (some horizontal tilt unavoidable), push in the boards and fix the bar to keep boards in place (with quite some force, try starting from one end and push in one input BB at a time) double-check the connectors, especially for vertical tilt (resulting in partial connection) verify grounding cable connection Double-check that the chiller is on Turn on the Maraton Start running the python scripts as described in here Note that you need to use Ctrl + b then arrow to switch tmux panel You can use Ctrl + r to reverse search past command lines Turning on one Maraton channel (channel numbers are labeled on SBC) as described in here after issuing command, verify all LEDs are on: 1 in the front and 4 in the back . If not, turn off the channel and check connections (e.g. only 4 LVR channels on due to partial input connection). Often the last few channels (11,10,9) need adjusting input BB connections (e.g. pushing in more). use multimeter to spot check voltages across the output connector solder joints (or output breakout boards) -- should be the set voltage plus some drop (e.g. 1V5+0.2V) Repeat for other channels At this point, all LVRs are running with low currents, before load-switching (seeing 5 Ohm fixed load) Make sure that the Switching Load Boards' secondary voltage supply is on (5V, 0A), and the cooling fans are on In another panel, start running the SwLoadTest.py ( src/demo/SwLoadTest.py ) Note Verify the changing current (2A/0A) on the voltage supply Now Switching Load Boards are in working state, LVRs are changing between high/low-current states and heating up quickly Go to monitoring website and verify the temperature measurements (should be going up from ~30C) Monitor and wait for the upper temperature target (40C), and verify the USB relay switched on (click and red LED) Info Now valve is open for cooling water Use FLIR camera to check for abnormally hot (>60C) spots, both on the LVRs and the SLBs Give yourself a pat on the back -- burn-in has started","title":"Start burning in a new batch"},{"location":"burnin/lvr_operations/lvr_operations/#stop-the-burn-in","text":"Before turning off the Maraton channels, check that: In the web monitoring history, each Maraton channel's current did not deviate from its high and low values (e.g. reducing to half if 1 LVR stopped working) all 4 LEDs on the back are on (indicating all 8 LVR channels have been on). no hot spot >60C on FLIR Spot check voltages on output breakout boards, e.g. 1V5 + ~0.2V drop. Very carefully probe between two adjecent groups of pins on output connector (slowly move one probe at a time to avoid shorting). Will add picture here later. Turn off Maraton channels one by one. Note Verify that the front LEDs are off Stop the control and monitoring scripts ( CtrlServer.py , CtrlClient.py , SwLoadTest.py ) by Ctrl + C Note You need to use Ctrl + b then arrow to switch tmux panel Some transmission failure messages may have covered the panel running CtrlClient.py For future convenience: after scripts are stopped, Ctrl + L to clear, then up arrow to bring up the last command Note USB relay should be automatically set to open (no red LED on) when scripts are stopped, if the last measured temperature is higher than the lower target (31C). If relay is closed, the DC power supply will keep pushing the solenoid valve on (not ideal). To open it by command line, refer to the burn-in software doc. Disconnect the output cables and hang them by their clip on the red wire. Disconnect the input breakout boards (after moving the SBC bar) Note Check for loose connections to the terminal blocks (can gently pull to see if a wire is loose) Disconnect the grounding wires Loosen the wedge locks and take out LVRs. Detach the thermal sensors as space around LVR opens up. Warning Take care not to pull wires off the sensors' leads Note Wedge locks should be loose after 3 complete turns. If you still have trouble moving the LVR, make sure it's not blocked by the crate's bottom horizontal rail. Put the LVRs into ESD bags, and update the database","title":"Stop the burn-in"},{"location":"burnin/lvr_operations/lvr_operations/#monitoring-from-off-campus","text":"To visit the monitoring website from off-campus, you can set up VPN this way: Install the VPN client software from UMD terpware . (You want to select your OS and find it under Network.) Login with your UMD account to connect to vpn.umd.edu (and select Group UMD)","title":"Monitoring from off-campus"},{"location":"cern/cern_installation/cern_dcb_depopulation/","text":"VTTx depopulation As the backplanes depopulate, for some DCBs only some GBTxs are used. The backplane design rules specify that when GBTxs are unused the unused GBTxs are always GBTx4 and GBTx5 . For these boards the optical mezzanine for GBTx4-5 does not need to be installed. Note I do not believe any special jumpers need to be installed but I will verify this (Will). Depopulated DCB placement The backplane mapping specifies which pairs of GBTxs are unused in the detector. They can be translated from \"proto\" JD slots to True and Mirror JD slots with the following table 1 : Proto 0 1 2 3 4 5 6 7 8 9 10 11 True 0 4 2 3 1 5 6 8 7 9 10 11 Mirror 4 0 3 2 5 1 8 6 9 7 11 10 Full backplane: This backplane has no depopulated DCBs Partially depopulated backplane: JD slots 1, 5, 6, 8 should be filled with depopulated DCBs. This applies to both True and Mirror backplanes. Depopulated backplane: In addition to JD 1, 5, 6, 8 , slots 7, 9 should also be filled with depopulated DCBs. This applies to both True and Mirror backplanes. The total number of depopulated DCBs is 72: 12 P backplanes * 4 DCBs + 4 D backplanes * 6 DCBs Copied from Zishuo's notes on mapping . \u21a9","title":"DCB depopulation"},{"location":"cern/cern_installation/cern_dcb_depopulation/#vttx-depopulation","text":"As the backplanes depopulate, for some DCBs only some GBTxs are used. The backplane design rules specify that when GBTxs are unused the unused GBTxs are always GBTx4 and GBTx5 . For these boards the optical mezzanine for GBTx4-5 does not need to be installed. Note I do not believe any special jumpers need to be installed but I will verify this (Will).","title":"VTTx depopulation"},{"location":"cern/cern_installation/cern_dcb_depopulation/#depopulated-dcb-placement","text":"The backplane mapping specifies which pairs of GBTxs are unused in the detector. They can be translated from \"proto\" JD slots to True and Mirror JD slots with the following table 1 : Proto 0 1 2 3 4 5 6 7 8 9 10 11 True 0 4 2 3 1 5 6 8 7 9 10 11 Mirror 4 0 3 2 5 1 8 6 9 7 11 10 Full backplane: This backplane has no depopulated DCBs Partially depopulated backplane: JD slots 1, 5, 6, 8 should be filled with depopulated DCBs. This applies to both True and Mirror backplanes. Depopulated backplane: In addition to JD 1, 5, 6, 8 , slots 7, 9 should also be filled with depopulated DCBs. This applies to both True and Mirror backplanes. The total number of depopulated DCBs is 72: 12 P backplanes * 4 DCBs + 4 D backplanes * 6 DCBs Copied from Zishuo's notes on mapping . \u21a9","title":"Depopulated DCB placement"},{"location":"cern/cern_pepi_installation_qa/cern_pepi_installation_qa/","text":"This document is a draft to PEPI installation QA, mainly regarding the cable connectivity test for now. Old method Install Backplane to PEPI crate baseplate with a custom BP support Install another custom Inner BB support Install Inner BB, Telemetry BB, and P2B2 cables, then populate PPP To test power and sense lines : Plug in custom DCB and Pig Tail continuity testing boards Turn on LVR with sense lines connected channel-by-channel Measure the voltages on the continuity testing boards Install Pig tails and the mechanical support for them Remove all power cables, then remove the custom-made Inner BB support Installed the DCB card guide, then remove custom-made BP support Re-install power cables Problems with the old method To remove the custom-made Inner BB support, all power cables have to be removed. This is because we have to re-use existing screw holes on the carbon fiber frame, and that means these screws will be blocked by power cables. When removing power cables, we need to unplug them from PPP due to the fact that we cut them to exact lengths. This means that after replug, we have no continuity test to ensure all cables are populated correctly. Proposed method Populate PPP Note All cables from the Inner BB and P2B2 cables will be plugged in For telemetry, we plugin the RJ45 connector without plugging in the MiniIO connector to the Telemetry BB. To test power lines : Turn on LVR without sense lines connected channel-by-channel Use a multimeter to measure voltage on the power cable/board BP side connectors To test sense lines : Turn off all LVR channels Use a MiniIO breakout board , then apply voltage at a particular pair of sense line Read the sense line voltage at LVR with SCA ADC Install BP with the custom BP support Install Pig Tails and their mechanical support Install DCB card guide Install all power cables Install Telemetry BB Install P2B2 cables Install sense lines to Telemetry BB Install Inner BB","title":"CERN PEPI installation QA"},{"location":"cern/cern_pepi_installation_qa/cern_pepi_installation_qa/#old-method","text":"Install Backplane to PEPI crate baseplate with a custom BP support Install another custom Inner BB support Install Inner BB, Telemetry BB, and P2B2 cables, then populate PPP To test power and sense lines : Plug in custom DCB and Pig Tail continuity testing boards Turn on LVR with sense lines connected channel-by-channel Measure the voltages on the continuity testing boards Install Pig tails and the mechanical support for them Remove all power cables, then remove the custom-made Inner BB support Installed the DCB card guide, then remove custom-made BP support Re-install power cables","title":"Old method"},{"location":"cern/cern_pepi_installation_qa/cern_pepi_installation_qa/#problems-with-the-old-method","text":"To remove the custom-made Inner BB support, all power cables have to be removed. This is because we have to re-use existing screw holes on the carbon fiber frame, and that means these screws will be blocked by power cables. When removing power cables, we need to unplug them from PPP due to the fact that we cut them to exact lengths. This means that after replug, we have no continuity test to ensure all cables are populated correctly.","title":"Problems with the old method"},{"location":"cern/cern_pepi_installation_qa/cern_pepi_installation_qa/#proposed-method","text":"Populate PPP Note All cables from the Inner BB and P2B2 cables will be plugged in For telemetry, we plugin the RJ45 connector without plugging in the MiniIO connector to the Telemetry BB. To test power lines : Turn on LVR without sense lines connected channel-by-channel Use a multimeter to measure voltage on the power cable/board BP side connectors To test sense lines : Turn off all LVR channels Use a MiniIO breakout board , then apply voltage at a particular pair of sense line Read the sense line voltage at LVR with SCA ADC Install BP with the custom BP support Install Pig Tails and their mechanical support Install DCB card guide Install all power cables Install Telemetry BB Install P2B2 cables Install sense lines to Telemetry BB Install Inner BB","title":"Proposed method"},{"location":"cern/cern_qa/cern_qa/","text":"DCB CERN QA Note All these procedures are automated by a single WinCC OA panel, please refer to this section below on how to use it. The DCB CERN QA will test the following aspects of 2 DCBs for a single run: Run regular GBTx PRBS test for 2 min. If there's any PRBS error in the previous step, re-run PRBS with 6 mA 1 bias current for 2 min. Run SALT PRBS on available elinks 2 for 2 min. Read master GBTx status via optical link to make sure master is configurable this way. Read all ADC lines that will be used in the final system. Remove DCBs from PEPI crate Before you proceed To appease the accelerator god(s), wear anti-static straps at all times and install caps on fibers immediately after removal. Note We are only using the 2 DCB slots on the bottom Pathfinder. Turn off bottom power 3 with the power panel on the MiniDAQ by clicking Bottom OFF . Turn off the 3V pull-up PSU: Pull out DCBs one-by-one, then remove all fibers and FFC 4 . Install DCBs to PEPI crate Install FFC to the DCB. Note The 2 FFCs are interchangeable. The FFC should be inserted to the second to right of the opt. mezz, when the copper pipes are pointing down (see the picture for FFC removal above). Install optical fibers to the DCB. Note The left DCB slot is JD0 , the right JD4 . The topmost fiber has the index 1 . Therefore, B0.4 means the 4th fiber from top to bottom at slot JD0 . Install DCB to the correct slot (the one with B0.x fibers must go to JD0 , B4.x JD4 ). Double check the pull-up harnesses are still connected on the FFC breakout board. If not, reconnect them according to the picture below. Also make sure the other ends are still connected to the 3V pull-up PSU. Turn on the 3V pull-up PSU. Turn on bottom power with the power panel by clicking Bottom ON . Use the DCB QA panel Info The panel looks like this: Info The log viewer can be launched from command line with: WCCOAtoolLogViewer -proj UTSLICETEST & Launch the DCB CERN QA panel in a terminal: WCCOAui -proj UTSLICETEST -p objects/fwDCB/UT_DCB_CERN_QA.pnl & Establish a working baseline Now it's a good time trying to read the status of master GBTx, to establish a working baseline. This can be done by clicking the Read master GBTx status on the Debug buttons. If you see one or two of the master status can't be read, like this: Turning off powers and try reseating the FFC! It is very likely that the FFC is not making good contact! If after reseating and swapping FFCs, the master status still can't be read, put the board aside, mark it as bad, and install a new board. Input the serial numbers for the 2 DCBs in the SN fields Click Start test In case the Optimize hybrid elinks fails The hybrid elinks optimization are more error-prune than the rest of the steps. One possibility is that the TFC NZS signal is not sent. To check that: TOP -> SODIN -> Core 0 -> Calibration A and make sure that make NZS option is ticked. Wait for it to finish. Take a look at the Test results section. If there's no red fields, then both of the DCBs are OK. If there's red, document the corresponding DCB as bad All test results are also saved in a log file. LVR CERN QA Note All these procedures are automated by a single WinCC OA panel. Please refer to this section below on how to use it. Proposed LVR nominal voltages LVR type M VrsR M VregR S VrsR S VregR 12A \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) - - 12MSA \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.4 \\pm 0.1\\) 12MS \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.4 \\pm 0.1\\) 15MS \\(1.5 \\pm 0.05\\) \\(1.7 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.7 \\pm 0.1\\) 25A \\(2.5 \\pm 0.05\\) \\(2.84 \\pm 0.1\\) - - Nomenclature VrsR : Sense voltage (converted) VregR : Output voltage (converted) VisR : Sense current (read as a voltage, before conversion) Note All voltages are in unit \"V\". These expected values are pre-set in the test panel as default valules, but they remain user-changeable. Since LVR CERN QA doesn't involve a load, all VisR is assumed to be at \\(0.1\\) . In 12MSA case, all expected voltages for A channels is assumed to be the same as that of the M channels. For slave S channels, the actual sense lines are unconnected. Instead, Master_Vref_Sense_in is connected. (See LVR schematic , p. 4) For S sense lines, as long as it's not rail (5.5 V) or GND , we are fine with it. Info The Output voltage VregR is the voltaged measured at LVR output connector. When sense line is unconnected, \\(\\frac{\\text{Sense voltage}}{\\text{Output voltage}} = \\frac{2000 - 249}{2000} = 0.88\\) . Use the LVR QA panel Info The panel looks like this: Launch the LVR CERN QA panel in a terminal: WCCOAui -proj UTLABDAQ2 -p fwTelemetry/QA_LVR.pnl & Installing LVR to SBC Check that CCMs and TCM are properly installed and sit flat Make sure the wedgelocks are loose, and slide the LVR into the SBC Make sure the wedgelock is locked with specified torque of 80 cNm (7 lb-ft). Info The name of the LVR wedgelock is Birtcher wedgelock retainer (40-5-12-T) The data sheet of the wedgelock can be found here Test the isolation of GND and GND_earth after connecting the GND_earth cables from SBC to LVR. Info This can be done with a multimeter. Fix one probe on SBC, while use the other end to probe on the right-most pin of the right LVR output connector (see picture below). One LVR only needs to be probed once. Info The LV_RETURN is connected to GND on LVR, but not the GND_earth . Default bias current is 5 mA. \u21a9 Some of the hybrids in the slice test Stave are not working, so we can't fully test every elink on DCBs. \u21a9 \"Bottom power\" refers to power to 2 bottom DCBs and Hybrids that the 2 DCBs connect \u21a9 Flexible Flat Cable. Note that FFC cable would be a tautology. \u21a9","title":"CERN QA"},{"location":"cern/cern_qa/cern_qa/#dcb-cern-qa","text":"Note All these procedures are automated by a single WinCC OA panel, please refer to this section below on how to use it. The DCB CERN QA will test the following aspects of 2 DCBs for a single run: Run regular GBTx PRBS test for 2 min. If there's any PRBS error in the previous step, re-run PRBS with 6 mA 1 bias current for 2 min. Run SALT PRBS on available elinks 2 for 2 min. Read master GBTx status via optical link to make sure master is configurable this way. Read all ADC lines that will be used in the final system.","title":"DCB CERN QA"},{"location":"cern/cern_qa/cern_qa/#remove-dcbs-from-pepi-crate","text":"Before you proceed To appease the accelerator god(s), wear anti-static straps at all times and install caps on fibers immediately after removal. Note We are only using the 2 DCB slots on the bottom Pathfinder. Turn off bottom power 3 with the power panel on the MiniDAQ by clicking Bottom OFF . Turn off the 3V pull-up PSU: Pull out DCBs one-by-one, then remove all fibers and FFC 4 .","title":"Remove DCBs from PEPI crate"},{"location":"cern/cern_qa/cern_qa/#install-dcbs-to-pepi-crate","text":"Install FFC to the DCB. Note The 2 FFCs are interchangeable. The FFC should be inserted to the second to right of the opt. mezz, when the copper pipes are pointing down (see the picture for FFC removal above). Install optical fibers to the DCB. Note The left DCB slot is JD0 , the right JD4 . The topmost fiber has the index 1 . Therefore, B0.4 means the 4th fiber from top to bottom at slot JD0 . Install DCB to the correct slot (the one with B0.x fibers must go to JD0 , B4.x JD4 ). Double check the pull-up harnesses are still connected on the FFC breakout board. If not, reconnect them according to the picture below. Also make sure the other ends are still connected to the 3V pull-up PSU. Turn on the 3V pull-up PSU. Turn on bottom power with the power panel by clicking Bottom ON .","title":"Install DCBs to PEPI crate"},{"location":"cern/cern_qa/cern_qa/#use-the-dcb-qa-panel","text":"Info The panel looks like this: Info The log viewer can be launched from command line with: WCCOAtoolLogViewer -proj UTSLICETEST & Launch the DCB CERN QA panel in a terminal: WCCOAui -proj UTSLICETEST -p objects/fwDCB/UT_DCB_CERN_QA.pnl & Establish a working baseline Now it's a good time trying to read the status of master GBTx, to establish a working baseline. This can be done by clicking the Read master GBTx status on the Debug buttons. If you see one or two of the master status can't be read, like this: Turning off powers and try reseating the FFC! It is very likely that the FFC is not making good contact! If after reseating and swapping FFCs, the master status still can't be read, put the board aside, mark it as bad, and install a new board. Input the serial numbers for the 2 DCBs in the SN fields Click Start test In case the Optimize hybrid elinks fails The hybrid elinks optimization are more error-prune than the rest of the steps. One possibility is that the TFC NZS signal is not sent. To check that: TOP -> SODIN -> Core 0 -> Calibration A and make sure that make NZS option is ticked. Wait for it to finish. Take a look at the Test results section. If there's no red fields, then both of the DCBs are OK. If there's red, document the corresponding DCB as bad All test results are also saved in a log file.","title":"Use the DCB QA panel"},{"location":"cern/cern_qa/cern_qa/#lvr-cern-qa","text":"Note All these procedures are automated by a single WinCC OA panel. Please refer to this section below on how to use it.","title":"LVR CERN QA"},{"location":"cern/cern_qa/cern_qa/#proposed-lvr-nominal-voltages","text":"LVR type M VrsR M VregR S VrsR S VregR 12A \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) - - 12MSA \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.4 \\pm 0.1\\) 12MS \\(1.25 \\pm 0.05\\) \\(1.4 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.4 \\pm 0.1\\) 15MS \\(1.5 \\pm 0.05\\) \\(1.7 \\pm 0.1\\) \\(3.7 \\pm 1\\) \\(1.7 \\pm 0.1\\) 25A \\(2.5 \\pm 0.05\\) \\(2.84 \\pm 0.1\\) - - Nomenclature VrsR : Sense voltage (converted) VregR : Output voltage (converted) VisR : Sense current (read as a voltage, before conversion) Note All voltages are in unit \"V\". These expected values are pre-set in the test panel as default valules, but they remain user-changeable. Since LVR CERN QA doesn't involve a load, all VisR is assumed to be at \\(0.1\\) . In 12MSA case, all expected voltages for A channels is assumed to be the same as that of the M channels. For slave S channels, the actual sense lines are unconnected. Instead, Master_Vref_Sense_in is connected. (See LVR schematic , p. 4) For S sense lines, as long as it's not rail (5.5 V) or GND , we are fine with it. Info The Output voltage VregR is the voltaged measured at LVR output connector. When sense line is unconnected, \\(\\frac{\\text{Sense voltage}}{\\text{Output voltage}} = \\frac{2000 - 249}{2000} = 0.88\\) .","title":"Proposed LVR nominal voltages"},{"location":"cern/cern_qa/cern_qa/#use-the-lvr-qa-panel","text":"Info The panel looks like this: Launch the LVR CERN QA panel in a terminal: WCCOAui -proj UTLABDAQ2 -p fwTelemetry/QA_LVR.pnl &","title":"Use the LVR QA panel"},{"location":"cern/cern_qa/cern_qa/#installing-lvr-to-sbc","text":"Check that CCMs and TCM are properly installed and sit flat Make sure the wedgelocks are loose, and slide the LVR into the SBC Make sure the wedgelock is locked with specified torque of 80 cNm (7 lb-ft). Info The name of the LVR wedgelock is Birtcher wedgelock retainer (40-5-12-T) The data sheet of the wedgelock can be found here Test the isolation of GND and GND_earth after connecting the GND_earth cables from SBC to LVR. Info This can be done with a multimeter. Fix one probe on SBC, while use the other end to probe on the right-most pin of the right LVR output connector (see picture below). One LVR only needs to be probed once. Info The LV_RETURN is connected to GND on LVR, but not the GND_earth . Default bias current is 5 mA. \u21a9 Some of the hybrids in the slice test Stave are not working, so we can't fully test every elink on DCBs. \u21a9 \"Bottom power\" refers to power to 2 bottom DCBs and Hybrids that the 2 DCBs connect \u21a9 Flexible Flat Cable. Note that FFC cable would be a tautology. \u21a9","title":"Installing LVR to SBC"},{"location":"cern/cern_visual_inspection/cern_visual_inspection/","text":"DCB Carefully examine the backplane and mezzanine connectors (both for the DCB and mezzanines), looking for any bent or broken pins or any other signs of excessive force The heat pipes are not perfectly straight, but check that they are not too bent for the cooling setup Do a brief visual scan of the visible side of the board for cracked components or torn pads LVR Check the TCM and CCM connectors for bent or broken pins or any other signs of excessive force Check that no potentiometers or switches are missing from the board Do a brief visual scan of the visible side of the board for cracked components or torn pads Check that the jumpers on J22 are in the correct position (3-5, 4-6) Backplane You can open the beautifully formatted Google Doc for backplane visual inspection and preparation checklist Or see its content below: Shipment package Visual inspection of the outer box and inner boxes Shock-watch sticker on the outer box Taking out the backplane Open from the top side of the inner box Practice ESD safety (e.g. wrist strap) when moving backplanes Always hold most of the backplane's weight from the rugged JPU/JPL side. Be very careful not to apply unnecessary pressure on/near pigtail (JP) connectors. See picture below: Use pressurized air to dedust (especially pigtail/DCB connectors) Use Deoxit lubricant with brush, for cleaning and lubrication: for each connector, dip the brush in bottle, stroke brush along bottle inner edge to remove excess, then carefully brush over each row of pins (not just pin tip) Check the pigtail and DCB connectors (JP 0-11, JD 0-11) Guideposts should not be bent or offset Pins should be well aligned within each connector Check the P2B2 pins + sockets (near JP 0-11 and JPL 0-2) Pins should not be bent Sockets should not detach from board pads, or offset above board surface Check the engagement of P2B2 to Backplane (sideview) Plastic spacers (top/middle/bottom) should be in place, and pressing against both boards Store the cleaned backplanes inside its ESD bag Each backplane has a color label to indicate type/variant, for easy identification during installation Check for type/variant consistency on backplane, ESD bag, and box: To protect the ready-for-install backplanes when moving them around, fold the ESD bag and carefully press it into the bottom foam: Because the top foam with the legs would have put much pressure through the bag onto pigtail connectors, remove the legs and then put it into the box. Alternatively, put in some ESD bubble wrap and leave the top foam out. Always keep the backplane and the box top side up.","title":"CERN visual inspection"},{"location":"cern/cern_visual_inspection/cern_visual_inspection/#dcb","text":"Carefully examine the backplane and mezzanine connectors (both for the DCB and mezzanines), looking for any bent or broken pins or any other signs of excessive force The heat pipes are not perfectly straight, but check that they are not too bent for the cooling setup Do a brief visual scan of the visible side of the board for cracked components or torn pads","title":"DCB"},{"location":"cern/cern_visual_inspection/cern_visual_inspection/#lvr","text":"Check the TCM and CCM connectors for bent or broken pins or any other signs of excessive force Check that no potentiometers or switches are missing from the board Do a brief visual scan of the visible side of the board for cracked components or torn pads Check that the jumpers on J22 are in the correct position (3-5, 4-6)","title":"LVR"},{"location":"cern/cern_visual_inspection/cern_visual_inspection/#backplane","text":"You can open the beautifully formatted Google Doc for backplane visual inspection and preparation checklist Or see its content below: Shipment package Visual inspection of the outer box and inner boxes Shock-watch sticker on the outer box Taking out the backplane Open from the top side of the inner box Practice ESD safety (e.g. wrist strap) when moving backplanes Always hold most of the backplane's weight from the rugged JPU/JPL side. Be very careful not to apply unnecessary pressure on/near pigtail (JP) connectors. See picture below: Use pressurized air to dedust (especially pigtail/DCB connectors) Use Deoxit lubricant with brush, for cleaning and lubrication: for each connector, dip the brush in bottle, stroke brush along bottle inner edge to remove excess, then carefully brush over each row of pins (not just pin tip) Check the pigtail and DCB connectors (JP 0-11, JD 0-11) Guideposts should not be bent or offset Pins should be well aligned within each connector Check the P2B2 pins + sockets (near JP 0-11 and JPL 0-2) Pins should not be bent Sockets should not detach from board pads, or offset above board surface Check the engagement of P2B2 to Backplane (sideview) Plastic spacers (top/middle/bottom) should be in place, and pressing against both boards Store the cleaned backplanes inside its ESD bag Each backplane has a color label to indicate type/variant, for easy identification during installation Check for type/variant consistency on backplane, ESD bag, and box: To protect the ready-for-install backplanes when moving them around, fold the ESD bag and carefully press it into the bottom foam: Because the top foam with the legs would have put much pressure through the bag onto pigtail connectors, remove the legs and then put it into the box. Alternatively, put in some ESD bubble wrap and leave the top foam out. Always keep the backplane and the box top side up.","title":"Backplane"},{"location":"dcb/dcb_assembly/dcb_assembly/","text":"For a summary of tasks, if you're already familiar with the assembly procedure, see here . Tip It is generally much quicker to work on multiple boards in parallel. After getting used to the assembly procedure, when working in parallel it should generally take around 1 hr/board assembly (assuming no slow-downs due to missing parts, etc). Info Most of the equipment needed for assembly should be able to be found on the downstairs table at any given moment. The new DCBs should be in boxes under that table, and new backplates, heat pipes, and thermal fillers should be in boxes nearby. The optical mezzanines are placed in a labeled grey cabinet, while the VTT/Rxs are in a black cabinet (all downstairs). Thermal gap filler installation There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together, or if working alone, it makes it easier if you only partially remove the film, position the thermal filler on the backplate, and then slowly peel off the rest of the film while letting the filler fall flat into place on the backplate. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersunk screw holes. Once the thermal gap filler looks straight, use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB. Heat pipe installation To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. You can use the plastic spreader to even out the thermal paste. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Note the orientation of the heat pipe in the image below Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alcohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Place a numbered sticker in the center of the backplate, as shown (note the first image is a fully assembled DCB; you won't have the board screwed in yet). Follow the pictures below for further guidance or if anything is not clear. Inspection of new DCB Warning Make sure you are grounded at all times when handling the DCB!! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Place Kapton tape on solder pads, as shown in the image below (regardless of whether the pads seem to have excess solder). If any other excess solder globs are present, similarly place Kapton tape on them. Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted. Place a small sticker near the backplane connector (again, the image below is of a fully assembled DCB; it's just meant to demonstrate the placement of the sticker) Final board assembly Tip There are a lot of screws for this step. In addition to the continuity check to ensure the board and backplate aren't shorted after screwing everything in, it is likely a good idea to check the grounds are isolated after only screwing in a few screws. This may save you the time of unscrewing/re-screwing everything if the board and backplate are shorted. Tip After tightly screwing in a few screws and testing ground isolation, in general it probably saves time to loosely screw everything in first and then tighten later. Use 16 M.2.5 countersunk bolts along with 16 long (\"standoff\") M.2.5 hexagonal nuts and Kapton washers (part# 5611-33-5) to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts and washers will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers (part# 5611-130-5) to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. They should be oriented with their metal side away from the board Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3, 4-6 J4 pins 3-4 J10 pins 3-4, 5-6 J12 1-2, 3-4, 5-6 J13 1-3, 2-4 Continuity check Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB. Optical Mezzanines Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx . An assembled mezzanine will look like this, where the black component in a yellow casing is a VTTx. Note A VTTx is black while a VTRx is red . They both have a yellow casing and look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs Update database You've assembled a DCB! Record the sticker serial number to the database . Place assembled board back in ESD bag and bubble wrap, and put in box with other assembled DCBs (may be upstairs near the initial QA setup). Place assembled mezzanines back in ESD bags, and put them upstairs in a box near the initial QA setup. Don\u2019t throw out the bubble wrap for the mezzanines; it\u2019ll be used for shipping. Put it back on top of the cabinet with all the new optical mezzanines.","title":"DCB mechanical assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#thermal-gap-filler-installation","text":"There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together, or if working alone, it makes it easier if you only partially remove the film, position the thermal filler on the backplate, and then slowly peel off the rest of the film while letting the filler fall flat into place on the backplate. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersunk screw holes. Once the thermal gap filler looks straight, use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB.","title":"Thermal gap filler installation"},{"location":"dcb/dcb_assembly/dcb_assembly/#heat-pipe-installation","text":"To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. You can use the plastic spreader to even out the thermal paste. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Note the orientation of the heat pipe in the image below Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alcohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Place a numbered sticker in the center of the backplate, as shown (note the first image is a fully assembled DCB; you won't have the board screwed in yet). Follow the pictures below for further guidance or if anything is not clear.","title":"Heat pipe installation"},{"location":"dcb/dcb_assembly/dcb_assembly/#inspection-of-new-dcb","text":"Warning Make sure you are grounded at all times when handling the DCB!! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Next flip the DCB over so that you are looking at the bottom side of the DCB. Check the bottom side near the optical mezzanines to ensure that there are no extra globs of solder protruding through the surface of the DCB. Note If there are extra globs of solder present then it can short the DCB when assembled to the backplate. An example of the extra globs of solder is shown here Place Kapton tape on solder pads, as shown in the image below (regardless of whether the pads seem to have excess solder). If any other excess solder globs are present, similarly place Kapton tape on them. Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted. Place a small sticker near the backplane connector (again, the image below is of a fully assembled DCB; it's just meant to demonstrate the placement of the sticker)","title":"Inspection of new DCB"},{"location":"dcb/dcb_assembly/dcb_assembly/#final-board-assembly","text":"Tip There are a lot of screws for this step. In addition to the continuity check to ensure the board and backplate aren't shorted after screwing everything in, it is likely a good idea to check the grounds are isolated after only screwing in a few screws. This may save you the time of unscrewing/re-screwing everything if the board and backplate are shorted. Tip After tightly screwing in a few screws and testing ground isolation, in general it probably saves time to loosely screw everything in first and then tighten later. Use 16 M.2.5 countersunk bolts along with 16 long (\"standoff\") M.2.5 hexagonal nuts and Kapton washers (part# 5611-33-5) to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts and washers will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers (part# 5611-130-5) to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Install jumpers to the board according to the picture, these are needed to configure the DCB. They should be oriented with their metal side away from the board Red Lines are where the jumpers go Note You should install 10 jumpers to the following connectors: J2 pins 1-3, 4-6 J4 pins 3-4 J10 pins 3-4, 5-6 J12 1-2, 3-4, 5-6 J13 1-3, 2-4","title":"Final board assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#continuity-check","text":"Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"Continuity check"},{"location":"dcb/dcb_assembly/dcb_assembly/#optical-mezzanines","text":"Each DCB needs 4 optical mezzanines, 3 with VTTxs and 1 with a VTRx . An assembled mezzanine will look like this, where the black component in a yellow casing is a VTTx. Note A VTTx is black while a VTRx is red . They both have a yellow casing and look the exact same otherwise. The VTT/Rxs have nubs on top that don't fit into the slot on the mezzanines. Take a pair of wire cutters and clip them off to be flush with the rest of the plastic casing. this can cause the holes to close over with plastic. Take a metal pick and carefully clear out the residual plastic to make a clean hole. Plug in a VTT/Rx and make sure the holes are aligned with the slot on the mezzanines front Screw in 2 M1.4 bolts to attach the mezzanine and the VTT/Rx, tighten gently. It can be really hard to get the tiny bolts to work. If you're having trouble, use tweezers to hold the bolt in place while putting a decent amount of force into the hole while you start to screw it in Repeat for 4 total mezzanines. Make sure one has a red VTRX while the rest have VTTxs","title":"Optical Mezzanines"},{"location":"dcb/dcb_assembly/dcb_assembly/#update-database","text":"You've assembled a DCB! Record the sticker serial number to the database . Place assembled board back in ESD bag and bubble wrap, and put in box with other assembled DCBs (may be upstairs near the initial QA setup). Place assembled mezzanines back in ESD bags, and put them upstairs in a box near the initial QA setup. Don\u2019t throw out the bubble wrap for the mezzanines; it\u2019ll be used for shipping. Put it back on top of the cabinet with all the new optical mezzanines.","title":"Update database"},{"location":"dcb/dcb_prod_with_pathfinder/dcb_prod_with_pathfinder/","text":"Production DCBs have an additional input to the master GBTx reset ( BP_MC_EC_RESETB ) coming from pin H43 on the backplane connector. This pin is grounded in the Pathfinder, and since the RESETB is active low, the DCB was in continuous reset. We fixed this issue by providing 3V through the manual reset MAN_MC_EC_RESETB , which comes out to the FFC breakout board connected to the optical mezzanine. As shown in the circuit below, the 3 V is divided to 1.5 V at the GBTx input and the DCB worked fine. Here's a schematic on how a 3 V pull-up would work: Here's the actual modification needed on the FFC breakout board: Warning Check the orientation of the FFC cable! They may be different between Maryland's and CERN's. If they are different, the bottom-left becomes top-right .","title":"Use production DCB with Pathfinder"},{"location":"dcb/dcb_qa/dcb_qa/","text":"Warning Make sure you are grounded at all times when handling the DCB! Failing to do so could destroy the boards! The DCB has a few purposes; aggregating data, controlling the stave, and monitoring. It has 4 optical mezzanines with 3 VTTxs and 1 VTRx, as well as 1 master GBTx, 1 GBT-SCA, and 6 data GBTxs. The DCB talks to the stave through the Backplane connecter and a computer through the mezzanines. The PRBS test checks the DCB ability to get data from the GBTxs to the computer. A psuedo-random bit sequence, or PRBS, is generated in the data GBTxs and sent to our computer via the VTTxs. This test verifies the black data lines on the image. In the SALT test, we tell the stave what data to send to the DCB to check the grey data lines. Each line represents 12 E-links connecting the stave to the GBTxs. For our tests, we have the stave sending c4 repeated to the DCB. It is easy for this to get out of phase, which is why we accept any stable data in the memory monitor as a success. To see possible out-of-phase responses, you can break c4 into 8bit binary and shift the bits left or right. You should find 26 , 13 , and 89 are all acceptable. We check the DCB control of the stave by testing TFC loopback, where a GBTx sends a header of 04 to the stave. We know the E-links will be good as they have just been checked, so we expect to see the stave repeating 04 back to us if everything is working correctly. It is also fine here to see a bit-shift, making it look like the stave is repeating 01 , 02 , or 08 . There are also ADCs (analog to digital converters) we look at to verify the power and, for the ones attached to thermistors, monitor the temperature on the DCB itself and the stave. Note Make sure to keep the database up to date as you go through the tests. Initial QA Fusing GBTx Warning If the DCB has already gone through the burn-in, skip fusing and go straight to \" Setting up DCB \" Verify the jumper on J2 , next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB, verify that the dongle coneections look like this. The mezzanine goes over the outline with the label OMDBMC . Don't worry about screwing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attached. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under D:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2.20180725.jar . Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock . If the state changes to anything with a hex value larger than 0x0A (state hex value is listed right after the name, 0x0A is waitDESlock ), eg. 0x0B or 0x11, please follow the instructions outlined here , and make a note in the database. to the right of table, find and click update view. All of the entries in the table should now be green Now check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Note Register 365 should not be checked and fused. Shut off power to the DCB and move the right jumper on J2 up one to be in-line with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green, except the last register 365. Shut off the power again, and add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector OMDBMC Setting up DCB Verify the backplane connector EVERY time before pluuging it into the backplane. Do not plug in if its pins are bent, as it can break the backplane. Check for pieces of thermal gap in the connector and clean it before plugging it it. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 The Master is connected to fiber 3 which corresponds to GBT ID 10 The optical fibers for the Master should be marked with black marker. The one with the thin white ribbon (circled in red below) should go on the left when facing the DCB (mezzanines toward you) Correct slot based on stave connection will either be JD10 (for stave JP8 ) or JD11 (for stave JP11 ) Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in. Checking Power There are 3 separate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10 , and B goes to the odd board, JD11 . It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. Note On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQ by going to Applications , WinCC , Project Administrator , then double click on the top project. Programming Data GBTxs There are 6 data GBTxs on each DCB, and these must be programed every time the board gets power cycled. Note nanoDAQ has some documentation here . A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here . Power on the DCB. In the nanoDAQ command prompt, we're going to pull the reset, also called GPIO, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low -g 10 to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 10 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high -g 10 You should now be able to program the GBTxs with the command you inputted earlier. PRBS Test Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on -g 10 Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes There is a screen above the power switch that shows some readout values for the lvr. In the top left chunk, we care about the values of i_SENSE_MON3 , i_SENSE_MON4 , and i_SENSE_MON7 . Add the values from 3 and 4 together and record it on the database under \"1.5V current[A]\" Record the value from 7 on the database under \"2.5V current[A]\" Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Enter ./dcbutil.py prbs off -g 10 in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" Warning Stop here if the DCB has NOT gone through the burn-in yet!!! If finishing an initial QA, turn off power to the DCB before removing it from the backplane. Final QA Note Follow the \" Setting up DCB \", \" Checking Power \",\" Programming Data GBTxs \" and \" PRBS Test \" instructions above before moving to the SALT and TFC test. In particular, remember to turn PRBS off before beginning. SALT and TFC Testing The following three tests (SALT, TFC, and ADC) have different instructions dependant on the slot the DCB is connected to, which is determined by the stave connection. Each slot only tests half of the board. Remember JP8 goes to slot JD10 and JP11 goes to slot JD11 . Changing the stave connection is a process, so we'll test the same half on many boards, then swap everything to check the other half. For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, click on the first Dev1_0 Power on the SALT. In nanoDAQ , type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low -g 10 (note there is no 6 now) Now type ./saltutil.py [I2C] read 0 0 1 -g 10 replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error Repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high -g 10 SALT testing Type ./saltutil.py [I2C] init -g 10 into nanoDAQ , filling in [I2C] with 3 , 4 , or 5 if the DCB is in slot JD10 or with 0 , 1 , 2 if the DCB is in slot JD11 Type ./dcbutil.py init ~/bin/tmp_0.xml -g 10 -s [GBT] , with [GBT] the corresponding GBT for your current I2C (see table below). Go to the memory monitoring panel and select the corresponding link for your GBT/I2C Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -g 10 -s [GBT] keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . there are 24 digits (8 x 3 columns) we care about, with 6-digit groups for 4 ASICs (6 x 4 groups); the 8-digit columns are not the groupings we care about. it is okay if the groups' digits don't agree, but each single group should have the same, stable digits once finding the right tmp_*.xml TFC testing Type ./saltutil.py [I2C] ser_src tfc -g 10 into nanoDAQ , continuing with the same I2C from the previous step. The values in the table should be 01, 02, 04, or 08 repeating Repeat the SALT and TFC testing for the other I2C/GBT/link pairs Note Refer to this table for which GBTs, I2Cs, and links correspond to one another Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 ADC Read Out If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings and check ADC read outs as follows PC : UMDlab, GBT ID : 10, SCA ID : 0, Version : 2 First click Activate Channel For now, set address to Read Channel and Line to 24, then 25, then 0. For each line, clicking read on the right updates the Data out field. Power lines: line 24 should be around 0.83 and line 25 should be around 0.5, both within ~0.02 Line 0 should be around 0.53, within ~0.04 (depending on the temperature) When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55, within ~0.04 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55, within ~0.04 Change address to Current Source and put ffffffff (8 f s) in Data in , then click write/read Put address back to Read Channel and check lines 1, 16, 17, and 18 by clicking read and looking at Data out Expected value 0.29 (was 0.15 for prototype DCBs before), within ~0.04 (temperature specified here , 0.32 corresponds to 50 degree celsius, higher value corresponds to smaller T) Optical to Master GBT We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Set up GBT Client such that GBT ID : 10, Device Address : 7, Register Address : 28, Size: 1 Click Read on the right and you should see 00 in Data out Put ff in Data in and click write/read Data out should now read ff Warning When finishing final QA, turn off power to the DCB before removing it from the backplane.","title":"DCB QA"},{"location":"dcb/dcb_qa/dcb_qa/#initial-qa","text":"","title":"Initial QA"},{"location":"dcb/dcb_qa/dcb_qa/#fusing-gbtx","text":"Warning If the DCB has already gone through the burn-in, skip fusing and go straight to \" Setting up DCB \" Verify the jumper on J2 , next to the optical mezzanines, looks like this There will already be an optical mezzanine connected to a dongle that you need to attach to the DCB, verify that the dongle coneections look like this. The mezzanine goes over the outline with the label OMDBMC . Don't worry about screwing it in, this is a temporary setup. On the left of the picture is a different power breakout board that must also be attached. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5, the power setup should look like the picture below. Power on the DCB. Open the GBTX Programmer on the windows PC. If it's not already open you can find it under D:/Users/DT_Rack/GBTx_Programmer as a jar file called programmerv2.20180725.jar . Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock . If the state changes to anything with a hex value larger than 0x0A (state hex value is listed right after the name, 0x0A is waitDESlock ), eg. 0x0B or 0x11, please follow the instructions outlined here , and make a note in the database. to the right of table, find and click update view. All of the entries in the table should now be green Now check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Note Register 365 should not be checked and fused. Shut off power to the DCB and move the right jumper on J2 up one to be in-line with the other jumper. To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green, except the last register 365. Shut off the power again, and add a red jumper to connector J4 as shown Take off the mezzanine with the dongle and attach all 4 of the mezzanines that came with the DCB. Make sure the red VTRx mezzanine goes on the connector OMDBMC","title":"Fusing GBTx"},{"location":"dcb/dcb_qa/dcb_qa/#setting-up-dcb","text":"Verify the backplane connector EVERY time before pluuging it into the backplane. Do not plug in if its pins are bent, as it can break the backplane. Check for pieces of thermal gap in the connector and clean it before plugging it it. Verify optical mezzanines are attached. They should rest on the long hex nuts. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 The Master is connected to fiber 3 which corresponds to GBT ID 10 The optical fibers for the Master should be marked with black marker. The one with the thin white ribbon (circled in red below) should go on the left when facing the DCB (mezzanines toward you) Correct slot based on stave connection will either be JD10 (for stave JP8 ) or JD11 (for stave JP11 ) Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in.","title":"Setting up DCB"},{"location":"dcb/dcb_qa/dcb_qa/#checking-power","text":"There are 3 separate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... A set of 8 cables are split into groups of 4 labeled DCB-A and DCB-B . The sets are broken down into two more sets of two; a master and slave (labeled M and S) which each have a source and return. A goes to the even board of a pair, slot JD10 , and B goes to the odd board, JD11 . It does not matter which wire gets the masters and which gets the slave SRC connects to the wire labeled 1v5 and RET connects to ground for all 4 pairs. VTTx There is a set of power and ground cables labeled 2v5 VTTX CH 3 and RET that we'll connect to a set of wires with a tag \"JD10/11\" The 2v5 VTTX cable connects to the wire labeled 2v5 and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. Note On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQ by going to Applications , WinCC , Project Administrator , then double click on the top project.","title":"Checking Power"},{"location":"dcb/dcb_qa/dcb_qa/#programming-data-gbtxs","text":"There are 6 data GBTxs on each DCB, and these must be programed every time the board gets power cycled. Note nanoDAQ has some documentation here . A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here . Power on the DCB. In the nanoDAQ command prompt, we're going to pull the reset, also called GPIO, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low -g 10 to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 10 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high -g 10 You should now be able to program the GBTxs with the command you inputted earlier.","title":"Programming Data GBTxs"},{"location":"dcb/dcb_qa/dcb_qa/#prbs-test","text":"Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on -g 10 Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes There is a screen above the power switch that shows some readout values for the lvr. In the top left chunk, we care about the values of i_SENSE_MON3 , i_SENSE_MON4 , and i_SENSE_MON7 . Add the values from 3 and 4 together and record it on the database under \"1.5V current[A]\" Record the value from 7 on the database under \"2.5V current[A]\" Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Enter ./dcbutil.py prbs off -g 10 in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" Warning Stop here if the DCB has NOT gone through the burn-in yet!!! If finishing an initial QA, turn off power to the DCB before removing it from the backplane.","title":"PRBS Test"},{"location":"dcb/dcb_qa/dcb_qa/#final-qa","text":"Note Follow the \" Setting up DCB \", \" Checking Power \",\" Programming Data GBTxs \" and \" PRBS Test \" instructions above before moving to the SALT and TFC test. In particular, remember to turn PRBS off before beginning.","title":"Final QA"},{"location":"dcb/dcb_qa/dcb_qa/#salt-and-tfc-testing","text":"The following three tests (SALT, TFC, and ADC) have different instructions dependant on the slot the DCB is connected to, which is determined by the stave connection. Each slot only tests half of the board. Remember JP8 goes to slot JD10 and JP11 goes to slot JD11 . Changing the stave connection is a process, so we'll test the same half on many boards, then swap everything to check the other half. For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, click on the first Dev1_0 Power on the SALT. In nanoDAQ , type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low -g 10 (note there is no 6 now) Now type ./saltutil.py [I2C] read 0 0 1 -g 10 replacing the [I2C] with 3 , 4 , and 5 if the DCB is in slot JD10 . Replace with 0 , 1 , 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error Repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high -g 10 SALT testing Type ./saltutil.py [I2C] init -g 10 into nanoDAQ , filling in [I2C] with 3 , 4 , or 5 if the DCB is in slot JD10 or with 0 , 1 , 2 if the DCB is in slot JD11 Type ./dcbutil.py init ~/bin/tmp_0.xml -g 10 -s [GBT] , with [GBT] the corresponding GBT for your current I2C (see table below). Go to the memory monitoring panel and select the corresponding link for your GBT/I2C Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -g 10 -s [GBT] keep incrementing the tmp_*.xml until the values are a stable bit shift of c4 . there are 24 digits (8 x 3 columns) we care about, with 6-digit groups for 4 ASICs (6 x 4 groups); the 8-digit columns are not the groupings we care about. it is okay if the groups' digits don't agree, but each single group should have the same, stable digits once finding the right tmp_*.xml TFC testing Type ./saltutil.py [I2C] ser_src tfc -g 10 into nanoDAQ , continuing with the same I2C from the previous step. The values in the table should be 01, 02, 04, or 08 repeating Repeat the SALT and TFC testing for the other I2C/GBT/link pairs Note Refer to this table for which GBTs, I2Cs, and links correspond to one another Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13","title":"SALT and TFC Testing"},{"location":"dcb/dcb_qa/dcb_qa/#adc-read-out","text":"If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings and check ADC read outs as follows PC : UMDlab, GBT ID : 10, SCA ID : 0, Version : 2 First click Activate Channel For now, set address to Read Channel and Line to 24, then 25, then 0. For each line, clicking read on the right updates the Data out field. Power lines: line 24 should be around 0.83 and line 25 should be around 0.5, both within ~0.02 Line 0 should be around 0.53, within ~0.04 (depending on the temperature) When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55, within ~0.04 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55, within ~0.04 Change address to Current Source and put ffffffff (8 f s) in Data in , then click write/read Put address back to Read Channel and check lines 1, 16, 17, and 18 by clicking read and looking at Data out Expected value 0.29 (was 0.15 for prototype DCBs before), within ~0.04 (temperature specified here , 0.32 corresponds to 50 degree celsius, higher value corresponds to smaller T)","title":"ADC Read Out"},{"location":"dcb/dcb_qa/dcb_qa/#optical-to-master-gbt","text":"We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Set up GBT Client such that GBT ID : 10, Device Address : 7, Register Address : 28, Size: 1 Click Read on the right and you should see 00 in Data out Put ff in Data in and click write/read Data out should now read ff Warning When finishing final QA, turn off power to the DCB before removing it from the backplane.","title":"Optical to Master GBT"},{"location":"dcb/dcb_shipping/dcb_shipping/","text":"Shipping procedure Mezzanines Remove mezzanines from DCB. Screws can go in a pile for later use for now. Put the rubber plug in the VTXx and put mezzanine in ESD bag. Note Don't sealing the ESD bags for now. Wrap bags in bubble wrap in the same way they arrived. We are packing the mezzanines as we take them off the boards, so 3 VTTx, 1 VTRx, etc. Seal the side and both ends of the bubble wrap with packing tape. !!! note This is not ESD safe tape, but it is outside the ESD bags. Stack the packed mezzanines in whatever boxes are available: Note Using mechanics and Amazon boxes, may need to order speficic boxes or just claim a few large ones. DCBs Much more speculative. Here are some things to think about: Note The DCB boxes could hold 16 DCBs, but the first one I packed only had enough cardboard dividers for 14. This means two DCBs would be touching the outer wall of the box. We could add cardboard or foam to protect them, or just ship 14. Note The DCBs are a little loose in the cardboard honeycomb, we could try to fit one more sheet of bubble wrap in if we have it. Check the DCB database and label the box DCB Box # according to the previously numbered DCB boxes. As you pack DCBs, note in the database that they have been put into DCB Box #. Make sure there is a layer of stiff pink foam at the bottom of the box. Remove one of the two short dividers and move the other to the middle of the box to fit the assembled DCB. After removing the optical mezzanines (above) close the ESD bag, remove the white strip from the bubble wrap bag and seal it. Fold the bag over the top of the DCBs, and wrap a sheet of thin bubble wrap around the bottom (currently using 2 pieces of u-line per board but will run out). Place the DCB in the box with the heat pipe side towards the outside of the box. Make sure the outer DCBs at the edges of the honeycomb are well protected with bubble wrap, and pad with some of the egg crate backplane foam or something similar. When the box is full, put a layer of stiff pink foam over the top.","title":"DCB Shipping"},{"location":"dcb/dcb_shipping/dcb_shipping/#shipping-procedure","text":"","title":"Shipping procedure"},{"location":"dcb/dcb_shipping/dcb_shipping/#mezzanines","text":"Remove mezzanines from DCB. Screws can go in a pile for later use for now. Put the rubber plug in the VTXx and put mezzanine in ESD bag. Note Don't sealing the ESD bags for now. Wrap bags in bubble wrap in the same way they arrived. We are packing the mezzanines as we take them off the boards, so 3 VTTx, 1 VTRx, etc. Seal the side and both ends of the bubble wrap with packing tape. !!! note This is not ESD safe tape, but it is outside the ESD bags. Stack the packed mezzanines in whatever boxes are available: Note Using mechanics and Amazon boxes, may need to order speficic boxes or just claim a few large ones.","title":"Mezzanines"},{"location":"dcb/dcb_shipping/dcb_shipping/#dcbs","text":"Much more speculative. Here are some things to think about: Note The DCB boxes could hold 16 DCBs, but the first one I packed only had enough cardboard dividers for 14. This means two DCBs would be touching the outer wall of the box. We could add cardboard or foam to protect them, or just ship 14. Note The DCBs are a little loose in the cardboard honeycomb, we could try to fit one more sheet of bubble wrap in if we have it. Check the DCB database and label the box DCB Box # according to the previously numbered DCB boxes. As you pack DCBs, note in the database that they have been put into DCB Box #. Make sure there is a layer of stiff pink foam at the bottom of the box. Remove one of the two short dividers and move the other to the middle of the box to fit the assembled DCB. After removing the optical mezzanines (above) close the ESD bag, remove the white strip from the bubble wrap bag and seal it. Fold the bag over the top of the DCBs, and wrap a sheet of thin bubble wrap around the bottom (currently using 2 pieces of u-line per board but will run out). Place the DCB in the box with the heat pipe side towards the outside of the box. Make sure the outer DCBs at the edges of the honeycomb are well protected with bubble wrap, and pad with some of the egg crate backplane foam or something similar. When the box is full, put a layer of stiff pink foam over the top.","title":"DCBs"},{"location":"faq/faq/","text":"LVR Undervoltage/Overtemperature lockout Such lockout would bring output voltage to 0. LVR input voltage 6-7 V. In UMD final QA, 6 V is used.","title":"FAQ"},{"location":"faq/faq/#lvr","text":"","title":"LVR"},{"location":"faq/faq/#undervoltageovertemperature-lockout","text":"Such lockout would bring output voltage to 0.","title":"Undervoltage/Overtemperature lockout"},{"location":"faq/faq/#lvr-input-voltage","text":"6-7 V. In UMD final QA, 6 V is used.","title":"LVR input voltage"},{"location":"lvr/ccm_id/ccm_id/","text":"CCM identification field guide Identification of a CCM of unknown configuration can be broken down into two parts: identifying the intended output voltage (1.2, 1.5, or 2.5 Volts = 12, 15, 25) and identifying whether it is a stand-alone single master (A), a master with support for a slave (M), or a slave (S). Here we'll call these Output Level and Role, respectively. Identifying Output Level To identify the output voltage of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: Code Voltage output [V] 104 1.2 203 1.5 502 2.5 Identifying the CCM Role To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Type Image Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1] Example CCM An example identification is shown in the picture.","title":"CCM Identification Guide"},{"location":"lvr/ccm_id/ccm_id/#ccm-identification-field-guide","text":"Identification of a CCM of unknown configuration can be broken down into two parts: identifying the intended output voltage (1.2, 1.5, or 2.5 Volts = 12, 15, 25) and identifying whether it is a stand-alone single master (A), a master with support for a slave (M), or a slave (S). Here we'll call these Output Level and Role, respectively.","title":"CCM identification field guide"},{"location":"lvr/ccm_id/ccm_id/#identifying-output-level","text":"To identify the output voltage of an unknown CCM, first inspect closely the potentiometer (POT-1). There is a 'B' logo, several arrows for benchmark points, and a 3-digit number (see picture). The three digit number may be used to identify the intended output voltage: Code Voltage output [V] 104 1.2 203 1.5 502 2.5","title":"Identifying Output Level"},{"location":"lvr/ccm_id/ccm_id/#identifying-the-ccm-role","text":"To identify whether the type is (M)aster, (S)lave or (A)lone (a.k.a. single master), inspect the 6 resistors on the bottom of the CCM (bottom here defined when the CCM is oriented such that the text is readable). From left to right, if we denote an empty pad by 0 and a populated resistor by 1, we have: Type Image Subtype A, single master - [0,0,0,1,1,0] Subtype M, master - [0,1,0,1,1,0] Subtype S, slave - [1,0,1,0,0,1]","title":"Identifying the CCM Role"},{"location":"lvr/ccm_id/ccm_id/#example-ccm","text":"An example identification is shown in the picture.","title":"Example CCM"},{"location":"lvr/ccm_qa/ccm_qa/","text":"This procedure acts under the assumption that the user is utilizing the pre-built CCM QA setup. Turn on both oscilloscopes connected to the LVR Take a master slave (MS) CCM pair, or take a single stand-alone master (A) CCM. If using an MS pair, validate that the pair are both either 1.2, 1.5, or 2.5 V Install the CCM MS pair on channels 1 & 2 of the LVR, or install the A CCM in channel 1 and place a resistor in channel 2. Note the following In the case of an MS pair, you CANNOT install 2 masters or 2 slaves on the same 2-channel pair Set the input voltage of the power supply to ~5.5 V Note the wave pattern on the first oscilloscope, displaying either 4 distinct channels if using an MS pair or 2 channels for an A CCM. Note the following Note that channels 1 and 2 correspond to the master, where channels 3 and 4 correspond to the slave. This is an example of a curve for a 1.5 MS CCM. The waveform displayed should be a smooth curve as shown in the figure above. This is an example of a curve for a 2.5 A CCM. The waveform displayed, you will note, has a slight oscillation. This is to be expected as this is just the representation of the turn-on voltage. This is an example of a curve for a 1.25 A CCM. The waveform displayed, you will note, has a slight oscillation. This is to be expected as this is just the representation of the turn-on voltage. This is an example of a curve for a 1.25 MS CCM. The waveform displayed has a slight oscillation. This is to be expected as this is just the representation of the turn-on voltage. Note the following In addition to similar shapes, For an MS pair ch1&2 (yellow and green) and ch3&4 (blue and red) (if slave is present) should converge to the same amplitude within +/- 3% or so. For an A CCM, ch1&2 should be within about 80mV. It may be useful to include a \"top\" voltage measurement on the display to do this easily. Locate the variable resistor on the master CCM or the A CCM, and note the voltage reading on channel 1 of the second oscilloscope, denoted Vtop . Adjust the variable resistor so the voltage reading of channel 1 corresponds to the voltage of the CCM (i.e. a 1.5 V CCM should have a channel reading of ~1.5 V) as shown below for a 1.5 V CCM. For a 12A CCM, this will mean adjusting the variable resistor all the way to the left (counterclockwise). For 12M CCMs set the voltage to 1.29V. After adjusting the variable resistor, go back to the first oscilloscope readings If the waveform displayed is still not smooth, either set aside your A CCM, or note the following if using an MS pair: If the bottom two curves ONLY are not smooth, this indicates a problem with the slave If BOTH curves are not smooth, replace the master CCM with a validated master CCM with the same voltage identity. If after replacing the curve is smooth and normal, the previous master CCM has a problem If after replacing the bottom curve is not smooth, this indicates a problem with the previous master CCM and the current slave CCM Once the CCM is fully QAd, place a colored dot labelling its type on the front of the CCM as indicated in the picture below, and a numbered sticker on the back of the CCM to indicate its serial number (there are different sticker rolls: one for 12As and the other one for all other types). Once all CCMs in a roll are complete, place the CCMs back into the roll and label the roll as XXY# , where XX denotes the CCM type (i.e. 25, 15, 12 ), Y denotes the pairing ( A, M, S ) and # denotes the serial number ( 001, 002, .... )","title":"CCM QA"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/","text":"CCM Test Stand Configuration Configuring the CCM test stand is a 3 staged process. This involves configuring the test stand based on if the CCM being used is 12, 15, 25 , and MS or A . Stage 1: Load Board The first stage involves selecting the appropriate output board to plug into the LVR output. There are two different output boards: For MS CCMs Output board for MS CCMs, and where to plug it in For A CCMs Output board for A CCMs Stage 2: Capacitor Board The second stage involves setting up the capacitor board. There are 2 different setting for the capacitor, each setting configuring the LVR for either 15MS/25A or 12A/12MS CCMs as indicated in the picture below. To configure 15MS and 25A CCMs, connect the right most cables on the capacitor board to the left most sockets, as labeled by the 25A and 15MS tags shown in the figure above. Polarity matters, the purple cable is positive. To configure 12A and 12MS CCMs, connect the left most cables on the capacitor board to the left most sockets as connected in the picture shown above. Polarity does not matter. Stage 3: Resistor Bank The third and final stage involves configuring the resistor bank. In this stage, you will be configuring the LVR to either 1.25, 1.5 , or 2.5 V. In general, when considering voltage and resistance, each channel that you use has 2.0-2.5 A running through it. For some CCM XXA , the setup uses 2.0-2.5 A. For some CCM xxM + xxS , the setup would use 3.8-5.0 A. When setting up the resistor bank, use jumpers to jump the resistor pins that you want. It does not matter how you jump the pins (since there are 3 per resistor) as long as the jumper goes over the middle pin. The jumper activates the resistor, which is added in parallel. Resistors are 0.5, 1, 2, and 5 Ohms. To configure 15MS CCMs, connect the resistors with jumpers as shown below. To configure 12A CCMs, connect the resistors with jumpers as shown below. To configure 25A CCMs, connect the resistors with jumpers as shown below. To configure 12MS CCMs, connect the resistors with jumpers as shown below. General CCM Test Stand Config: Scope 1 should have channels 1 and 2 on. Channel 1 is connected to the load board, channel 2 is connected to pins 1 and 2 of the output connector. Scope 2 should have channels 1 and 2 on for A, all channels on for MS. They are connected as shown Channel 1/A is Master, 2/B is slave. Unused channels should be disabled by switches or a resistor between pins 15 and 17.","title":"CCM Test Stand Configuration"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/#ccm-test-stand-configuration","text":"Configuring the CCM test stand is a 3 staged process. This involves configuring the test stand based on if the CCM being used is 12, 15, 25 , and MS or A .","title":"CCM Test Stand Configuration"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/#stage-1-load-board","text":"The first stage involves selecting the appropriate output board to plug into the LVR output. There are two different output boards: For MS CCMs Output board for MS CCMs, and where to plug it in For A CCMs Output board for A CCMs","title":"Stage 1: Load Board"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/#stage-2-capacitor-board","text":"The second stage involves setting up the capacitor board. There are 2 different setting for the capacitor, each setting configuring the LVR for either 15MS/25A or 12A/12MS CCMs as indicated in the picture below. To configure 15MS and 25A CCMs, connect the right most cables on the capacitor board to the left most sockets, as labeled by the 25A and 15MS tags shown in the figure above. Polarity matters, the purple cable is positive. To configure 12A and 12MS CCMs, connect the left most cables on the capacitor board to the left most sockets as connected in the picture shown above. Polarity does not matter.","title":"Stage 2: Capacitor Board"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/#stage-3-resistor-bank","text":"The third and final stage involves configuring the resistor bank. In this stage, you will be configuring the LVR to either 1.25, 1.5 , or 2.5 V. In general, when considering voltage and resistance, each channel that you use has 2.0-2.5 A running through it. For some CCM XXA , the setup uses 2.0-2.5 A. For some CCM xxM + xxS , the setup would use 3.8-5.0 A. When setting up the resistor bank, use jumpers to jump the resistor pins that you want. It does not matter how you jump the pins (since there are 3 per resistor) as long as the jumper goes over the middle pin. The jumper activates the resistor, which is added in parallel. Resistors are 0.5, 1, 2, and 5 Ohms. To configure 15MS CCMs, connect the resistors with jumpers as shown below. To configure 12A CCMs, connect the resistors with jumpers as shown below. To configure 25A CCMs, connect the resistors with jumpers as shown below. To configure 12MS CCMs, connect the resistors with jumpers as shown below.","title":"Stage 3: Resistor Bank"},{"location":"lvr/ccm_test_stand_config/ccm_test_stand_config/#general-ccm-test-stand-config","text":"Scope 1 should have channels 1 and 2 on. Channel 1 is connected to the load board, channel 2 is connected to pins 1 and 2 of the output connector. Scope 2 should have channels 1 and 2 on for A, all channels on for MS. They are connected as shown Channel 1/A is Master, 2/B is slave. Unused channels should be disabled by switches or a resistor between pins 15 and 17.","title":"General CCM Test Stand Config:"},{"location":"lvr/lvr_assembly/lvr_assembly/","text":"Setup Make sure you are grounded. Visually inspect the LVR for any damage. You will need the following items: LVR LVR Baseplate Wedge Locks 8mm flat head (not countersunk) M2.5 screws M2.5 washers 5mm M2 screws Thermal gap filler strips Thermal paste (GL-20-10 for now) Kapton Tape Punch Screwdrivers Continuity check Measure the resistance between any of the grounds (for example ground pins of the input/output connectors) and the chassis ground. The resistance should be on the order of 100k ohms. Wedge Locks Put a strip of kapton along the edges of the CCM side of the board. Poke holes for the wedge lock screws with a punch. Attach the wedgelocks IMPORTANT The side that can be adjusted with an alan key needs to face the LVR outputs (two big connectors)). Attach each wedgelock with 2 M2 screws. Note I put the wedge locks on last. It should be much easier to do them first, but I don't have any pictures. Thermal gap filler Remove one side of the plastic backing and press the gap filler strip on to the exposed metal on the LHC4913 side of the board, aligning the screw holes. Then remove the plastic backing from the other side. Repeat for the other side of the board. Put the applicator flush with the top of an LHC4913 chip, gently push the plunger, and spread some paste on the chip. Very little paste is needed, and only covering the metal heat sink. See above picture for approximate thickness. Repeat for all 10 chips. Baseplate Place the baseplate on the LHC4913 side of the LVR. Make sure the baseplate is aligned so that the raised squares with threaded holes match the holes on the LVR. Also check that all corners are aligned. Put an M2.5 screw and washer in each hole. First tighten very gently, then make hand tight in an X pattern across the board. For your first few boards, try to look between the LVR and baseplate to see that the thermal paste has made contact with the baseplate and been deformed. Not all chips can be verified this way. Put a number sticker on the baseplate matching the number on the front of the LVR. Make sure to use the roll labeled for LVRs. CCMs Attach 8 CCMs, matching the color of the stickers on the LVR. Make sure to orient the CCMs correctly (see picture) Final Repeat the continuity check above to ensure that the LHC4913 chips have not made contact with the baseplate during assembly. Measure the resistance between any of the grounds and the aluminum backplate. The resistance should be on the order of 100k ohms to ensure the backplate is not electrically connected to the LVR. Put a post-it note on the ESD bag matching the color of the CCM stickers, and put the LVR in the box for burn-in. Update the database, you have assembled an LVR!","title":"LVR mechanical assembly"},{"location":"lvr/lvr_assembly/lvr_assembly/#setup","text":"Make sure you are grounded. Visually inspect the LVR for any damage. You will need the following items: LVR LVR Baseplate Wedge Locks 8mm flat head (not countersunk) M2.5 screws M2.5 washers 5mm M2 screws Thermal gap filler strips Thermal paste (GL-20-10 for now) Kapton Tape Punch Screwdrivers","title":"Setup"},{"location":"lvr/lvr_assembly/lvr_assembly/#continuity-check","text":"Measure the resistance between any of the grounds (for example ground pins of the input/output connectors) and the chassis ground. The resistance should be on the order of 100k ohms.","title":"Continuity check"},{"location":"lvr/lvr_assembly/lvr_assembly/#wedge-locks","text":"Put a strip of kapton along the edges of the CCM side of the board. Poke holes for the wedge lock screws with a punch. Attach the wedgelocks IMPORTANT The side that can be adjusted with an alan key needs to face the LVR outputs (two big connectors)). Attach each wedgelock with 2 M2 screws. Note I put the wedge locks on last. It should be much easier to do them first, but I don't have any pictures.","title":"Wedge Locks"},{"location":"lvr/lvr_assembly/lvr_assembly/#thermal-gap-filler","text":"Remove one side of the plastic backing and press the gap filler strip on to the exposed metal on the LHC4913 side of the board, aligning the screw holes. Then remove the plastic backing from the other side. Repeat for the other side of the board. Put the applicator flush with the top of an LHC4913 chip, gently push the plunger, and spread some paste on the chip. Very little paste is needed, and only covering the metal heat sink. See above picture for approximate thickness. Repeat for all 10 chips.","title":"Thermal gap filler"},{"location":"lvr/lvr_assembly/lvr_assembly/#baseplate","text":"Place the baseplate on the LHC4913 side of the LVR. Make sure the baseplate is aligned so that the raised squares with threaded holes match the holes on the LVR. Also check that all corners are aligned. Put an M2.5 screw and washer in each hole. First tighten very gently, then make hand tight in an X pattern across the board. For your first few boards, try to look between the LVR and baseplate to see that the thermal paste has made contact with the baseplate and been deformed. Not all chips can be verified this way. Put a number sticker on the baseplate matching the number on the front of the LVR. Make sure to use the roll labeled for LVRs.","title":"Baseplate"},{"location":"lvr/lvr_assembly/lvr_assembly/#ccms","text":"Attach 8 CCMs, matching the color of the stickers on the LVR. Make sure to orient the CCMs correctly (see picture)","title":"CCMs"},{"location":"lvr/lvr_assembly/lvr_assembly/#final","text":"Repeat the continuity check above to ensure that the LHC4913 chips have not made contact with the baseplate during assembly. Measure the resistance between any of the grounds and the aluminum backplate. The resistance should be on the order of 100k ohms to ensure the backplate is not electrically connected to the LVR. Put a post-it note on the ESD bag matching the color of the CCM stickers, and put the LVR in the box for burn-in. Update the database, you have assembled an LVR!","title":"Final"},{"location":"lvr/lvr_config/lvr_config/","text":"Abstract The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible. Channel Sense lines If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: Channels Pins CH1 & 5 1 & 2 CH2 & 6 4 & 5 CH3 & 7 4 & 5 CH4 & 8 7 & 8 Setting Up Monitor/Programmer This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: Turn power off Connect jumpers between J22 pins 2 & 4 ( V_pump ) Connect jumpers between J22 pins 1 & 3 ( V_jtag ) Connect programmer to J17 . Turn power on Initiate the program sequence Move jumpers on J22 to connect pins 4 & 6 and pins 3 & 5 To set up the monitor: Connect Raspberry Pi leads to J18 . Note Leads must start at pin row 3-4, not 1-2. Turn on raspberry Pi and run code V_SENSE refers to the output feedback voltage from the CCM V_REGUL_OUT refers to full input voltage i_SENSE_MON refers to current through resistor ____ Fuse/Channel Configuration This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: Label on fuse Channels F3-4 CH5 & 6 F1-2 CH7 & 8 F7-8 CH1 & 2 F5-6 CH3 & 4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB -> MSB , with the fourth toggle putting the channel in an always on state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts. Configuration of LVR LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8. Normal versus Duty Cycle Mode For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every ~3 seconds that appears to last for ~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than ~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR. Master/slave pairings Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be notified channels 2, 4, 6, 8 should be slaves or masters, via SW4. The ON setting of the switch corresponds to slave in a M+S pair, while the OFF state is the setting for single master. SW4 switch Channels 1 CH2 2 CH4 3 CH6 4 CH8 Note When setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom's notes on the configuration switches for the LVR, including master/slave and general enables. IMPORTANT THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \"ON\" ON THE SWITCH IS LOGIC 0 AND \"OFF\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5 and NOT 2,3,4,5. Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8. Overtemperature/Undervoltage Lockout The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB -> MSB ) Binary setting LVR shuts off at [C] 0101 39 1101 30 1001 55 0001 70 The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: SW6 switcher 1-3 Undervoltage lockout at [V] 0,0,0 5.9 1,0,0 5.4 0,1,0 5.1 0,0,1 4.6 1,1,0 5.1 0,1,1 4.1 1,1,1 3.9 1,0,1 4.6","title":"LVR Configuration"},{"location":"lvr/lvr_config/lvr_config/#abstract","text":"The following serves as a guide for general LVR operation as well as LVR QA procedures. The firmware loaded onto the LVRs by default does not allow for channels to be directly controlled. When power is connected the channels will come up in sequenced pairs (1-2, then 3-4, etc). It is therefore important that you only bring up Vin if you are okay with there being Vout. It is wise to first power up with the loads disconnected and verify the polarity and amplitude of the outputs. Beware doing this that if loads are disconnected from Vout but the sense lines remain hooked up the output will just jump to 5V. Channels should not be left at 5V output for a long time. There is a resistor providing 220 Ohm minimal load, which is rated for 0.125W, but would have to dissipate 0.11W. Therefore, channels with power but no CCM should be set up as per \"other unused channels\" below, such that the power through this resistor is negligible.","title":"Abstract"},{"location":"lvr/lvr_config/lvr_config/#channel-sense-lines","text":"If RJ45 connections to the remote sense are unavailable (broken) the regulators will fall back on a local sense mode and regulate the output voltage at their connector instead. The sense line inputs follow RJ45 conventions: Channels Pins CH1 & 5 1 & 2 CH2 & 6 4 & 5 CH3 & 7 4 & 5 CH4 & 8 7 & 8","title":"Channel Sense lines"},{"location":"lvr/lvr_config/lvr_config/#setting-up-monitorprogrammer","text":"This section deal with setting up the monitor/programmer for the LVR. To set up the programmer: Turn power off Connect jumpers between J22 pins 2 & 4 ( V_pump ) Connect jumpers between J22 pins 1 & 3 ( V_jtag ) Connect programmer to J17 . Turn power on Initiate the program sequence Move jumpers on J22 to connect pins 4 & 6 and pins 3 & 5 To set up the monitor: Connect Raspberry Pi leads to J18 . Note Leads must start at pin row 3-4, not 1-2. Turn on raspberry Pi and run code V_SENSE refers to the output feedback voltage from the CCM V_REGUL_OUT refers to full input voltage i_SENSE_MON refers to current through resistor ____","title":"Setting Up Monitor/Programmer"},{"location":"lvr/lvr_config/lvr_config/#fusechannel-configuration","text":"This section deals with which channels are being used. Ideally fuses should be installed only for the channels to be used. Unfused is the safest state for an unused channel. The input BBs are mislabeled: Label on fuse Channels F3-4 CH5 & 6 F1-2 CH7 & 8 F7-8 CH1 & 2 F5-6 CH3 & 4 Input voltage should be set above the UVL (Undervoltage lockout) setting for that fuse group. As presently configured (pre-slice test) 5.5V appears adequate for all configurations, but this is subject to further study Undervoltage lockout is configured via SW6A-SW6D (that is, one per fuse group). This circuit disables the associated channels if the input voltage falls below a threshold set by the switch. Within one SW4x, the four toggles form a 3-digit number LSB -> MSB , with the fourth toggle putting the channel in an always on state (override UVL). It is best to be at least 0.25V, preferably 0.5V above the actual drop-out voltage, otherwise a channel may appear to be on, but when it actually tries to start the natural drop in Vin from the abrupt increase in current demand by the regulator causes the UVL to trip, leading to a series of false-start hiccups rather than actual starts.","title":"Fuse/Channel Configuration"},{"location":"lvr/lvr_config/lvr_config/#configuration-of-lvr","text":"LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8.","title":"Configuration of LVR"},{"location":"lvr/lvr_config/lvr_config/#normal-versus-duty-cycle-mode","text":"For Low Duty Cycle Pulsed mode, we enable this via setting SW3-1 to OFF. It provides a pulse every ~3 seconds that appears to last for ~60ms. Normal mode (or continuous mode) provides continuous transmission of voltage. It is recommended that for operation periods greater than ~20 minutes to have the board on Duty Cycle Pulsed mode (30-45 min in extreme cases), whereas short operation periods can utilize continuous mode. This is to prevent overheating of 4913ADLHC regulator chips on LVR.","title":"Normal versus Duty Cycle Mode"},{"location":"lvr/lvr_config/lvr_config/#masterslave-pairings","text":"Master slave pairs should ideally always be within a fuse group, and must follow ascending channel number. That is, CH1 is M and CH2 is S, or CH3 is M and CH4 is S, or CH5 is M and CH6 is S etc. In addition to the appropriate CCM type, the firmware must be notified channels 2, 4, 6, 8 should be slaves or masters, via SW4. The ON setting of the switch corresponds to slave in a M+S pair, while the OFF state is the setting for single master. SW4 switch Channels 1 CH2 2 CH4 3 CH6 4 CH8 Note When setting up master/slave CCM pairs, slave CCMs should always be on even numbered CCMs. Note In the current firmware, SW5 contains enables for CH1-4, CH5-8 and a global standby. To operate the regulator SW5 must be set as: (OFF, OFF, ON, OFF) Tom's notes on the configuration switches for the LVR, including master/slave and general enables. IMPORTANT THE CONVENTION HERE IS OPPOSITE WHAT YOU EXPECT BECAUSE THESE ARE SHORTING PULL-UPS. \"ON\" ON THE SWITCH IS LOGIC 0 AND \"OFF\" IS LOGIC 1. Also please note that the physical order is 3,2,4,5 and NOT 2,3,4,5. Note that LVR Configuration is done via the CCMs and the potentiometers P3 and P4, which should be set according to the CCMs to be installed as Vos [V] Vout [V] 1.775 2.5 1.546 1.5 1.483 1.225 P3 controls CH1-CH4, P4 controls CH5-CH8, and each group of four must use the same CCM Vout. Vos may be measured across TP9-TP10 for CH1-4, and TP14-15 for CH5-8.","title":"Master/slave pairings"},{"location":"lvr/lvr_config/lvr_config/#overtemperatureundervoltage-lockout","text":"The overtemperature lockout is configured by SW1. SW1 represents a binary number with switch 1 the LSB and switch 4 the MSB. Settings which have been explored in the lab are (in big endian, LSB -> MSB ) Binary setting LVR shuts off at [C] 0101 39 1101 30 1001 55 0001 70 The slice test could easily run at either of the last two. The undervoltage lockout is configured by SW6(A, B, C, D). We note the following configurations for each SW6#. Note that if 4 in SW6#[1, 2, 3, 4] is ON, this acts as a bypass for all other switches. We therefore only consider switcher 1-3: SW6 switcher 1-3 Undervoltage lockout at [V] 0,0,0 5.9 1,0,0 5.4 0,1,0 5.1 0,0,1 4.6 1,1,0 5.1 0,1,1 4.1 1,1,1 3.9 1,0,1 4.6","title":"Overtemperature/Undervoltage Lockout"},{"location":"lvr/lvr_qa/lvr_qa/","text":"If you are already familiar with this procedure, you can simply follow the LVR initial QA checklist . Before you proceed Beware that TP5 is NOT GND. The silkscreen label applies to the adjacent TP2 . Caution is needed when connecting test lead clips to the test points. The test points are rather fragile and easily pulled of the board. Care must be taken to avoid temporary unintended shorts from the high density of surrounding components, vias, and traces. Visually inspect a new LVR and set the switches as indicated in the table below. Order refers to toggles 1234 on the switch, with 1 meaning ON . (CCM) or (FPGA) refer to the side of the LVR the switch is on. There are four SW6 switches. Place the LVR on the holder as shown in the picture. The CCM side should be facing you and the input connector be at the top. Recall that the one input is on one end and the two outputs on the other. Place an serial number sticker on a new LVR under the input connector, and document its serial number in the database . Also document which type of LVR you intend to QA (12MS, 12A, 12MSA, 15MS, 25A). You don't need to fill every column in the database as you complete that test until you finish the QA or leave the setup for any reason. The CCM serial number is documented at a later stage, during LVR assembly. Verify that the chassis and power ground are isolated by > 25k Ohms (often 180k Ohms) Measure the resistance between the lugs sticking out near the input connector and any GND test point on the board (eg. TP7 ) Repeat measurement reversing the polarity of leads (ground isolation circuit is different each way) Connect JTAG programmer to J17 on the back of the board, bottom-center (the ribbon in the picture abvove). Connect blue jumpers between J22 (near ch8) pins 2 & 4 ( V_pump ) and between J22 pins 1 & 3 ( V_jtag ). You can zoom in the above picture (righ-click, view image) to check it. This configuration allows you to program the FPGA later on. Connect the raspberry Pi LVR monitor to the board, and activate the LVR monitor on the laptop if it is not already running. If not using the Pi, you can follow the instructions at the bottom of the page. Go to PuTTY and select Monitor Pi Both user name and password are \" lvr \" Set the power supply initially to 1.6V and the current limited to 2.0A, and connect provided input breakout board. Verify polarity of connections visually Red wire in positive terminal of power supply Blue wire in negative terminal Negative terminal ground shorted Turn power supply on and enable output Adjust the P1 , P2 , and P5 potentiometers so that the 1.5V, 3.3V, and 5.5V rails (voltage plateaus) are set to those values. Slowly increase the input voltage from the initial 1.6V until either the 1.5V reading ( Vin_FPGA_1V5 ) stops increasing or exceeds 1.5V. At this point, tune the output using P1 to set it to 1.5V. You may have to increase the voltage more and iterate the tuning process. An alternate approach is given in the tip below. Resume raising the input voltage and repeat this process on the 3.3V ( Vin_FPGA_3V3 ) and 5.5V ( V_OPAMP_RAIL ) levels in the Pi LVR monitor. You should now be able to raise the input voltage all the way to 7V and the three readings should be stable. Warning STOP IF VALUES BELOW ARE EXCEEDED to prevent damage. 1.5V x 110% = 1.65V 3.3V x 110% = 3.63V The 5.5V rail ( Vop_rail ) should not exceed 5.5V!! When the power supply reaches about 4.5V, the expected input current given by the supply at this point should be around 0.09A. If it is substantially more there may be a problem Tip It may be useful to let the rail approach the desired value from below as input voltage increases, then turn down the rail plateau to a value below the desired final plateau, and make the final adjustments by turning the input voltage and rail plateau values up simultaneously. Note that you can verify the rail has reached its plateau if you increase the input voltage and the rail voltage no longer increases. Desired values The 1.5V and 3.3V rails should be set to within 0.01V if possible. The 5.5V rail works in the 5.0-5.5V range, with a preference to be in the range 5.45-5.5V, as this allows for a slightly better time response. Adjust the P3 and P4 potentiometers to set utput standby configuration. Adjust the voltage offsets to 1.483V (1.2V LVR), 1.546V (1.5V LVR), or 1.775V (2.5V LVR) within a few mV at the following test point pairs using the following potentiometers, using a multimeter to read the DC voltage. CH 4-1: TP9 ( Vos_gen ) and TP10 (GND) CH 8-5: TP14 ( Vos_gen ) and TP15 (GND) Program the FPGA Initiate the program sequence, opening FlashPro on the laptop if is not already running If no program has been loaded onto the FPGA, go to Open Project and select the pre-loaded program in the LVR folder you want to run Go to Configure Device Click Browse, and select the file v2-06_lvr_fw.stp Set MODE to basic (should be default), and set ACTION to program Once that is complete, click PROGRAM Check in the log that the auto-verify ran successfully ( RUN PASSED in green). Turn off power and install all 8 CCMs in the orientation that allows you to read the silkscreen as shown below. Remove the Raspberry Pi connector to install those. For an MS type LVR, set up master CCMs on odd channels, slaves on even. For an A type LVR, place stand-alone single master ( A ) CCMs on all channels. For MSA type, fill channels 1-4 with MS and 5-8 with A CCMs. Reduce power supply voltage to about 4.3V (1.2V LVR), 4.8V (1.5V LVR), or 5.3V (2.5V LVR) and check the under-voltage lockout (UVL) turns all channels off in the Rpi monitor. Set input voltage back to 7V Change SW1 to 0011 , and check the over-temperature protection turns all channels off and the LD7 LED turns on. Some times you may have to go all the way to 1111 . Use the RJ45 breakout board to perform the sense line test. Verify that the voltage of a channel goes to RAIL when the corresponding sense lines are shorted to each other selecting the appropriate switches Note Slave channels will not alter voltage when shorting those channels. They will only go to RAIL when shorting their respective master channels. SPI Communication test On the laptop's desktop, locate the \"SPI test\". Run this shortcut. The username and password are both 'spitest' Request WORD2, which should end with 0x206 (the FW version) and try modifying the config to turn all the channels OFF and ON again. Connect the SPI_RESET line (floating green wire) to any GND test point on the LVR and check that the response is all 00 00 00 00 no matter the command you send until you allow the SPI_RESET to float once more. Switch off the power and disconnect everything from the board (excluding the jumpers placed on J22 ), and place colored stickers on the board near the CCM connectors to indicate which CCMs were used on the board during the QA. Make sure you update the database appropriately. You're done! If not using the raspberry Pi LVR monitor Place a DVM (DC Voltage Meter) between TP3 (3.3V) and TP6 (GND) to monitor the 3.3V rail Add another DVM between TP8 (1.5V) and TP6 (GND) to monitor the 1.5V rail Add and a third DVM between TP4 ( Vop_rail ) and TP7 (GND) to monitor the op amp rail. The image below shows the location of TP3 , TP6 , and TP8 , as well as potentiometers P1 and P2 that will be used to adjust the 1.5V and 3.3V rails.: The image shows the locations of TP4 , TP7 , and P5 for the op amp rail.","title":"LVR Setup/Initial QA"},{"location":"lvr/lvr_qa/lvr_qa/#if-not-using-the-raspberry-pi-lvr-monitor","text":"Place a DVM (DC Voltage Meter) between TP3 (3.3V) and TP6 (GND) to monitor the 3.3V rail Add another DVM between TP8 (1.5V) and TP6 (GND) to monitor the 1.5V rail Add and a third DVM between TP4 ( Vop_rail ) and TP7 (GND) to monitor the op amp rail. The image below shows the location of TP3 , TP6 , and TP8 , as well as potentiometers P1 and P2 that will be used to adjust the 1.5V and 3.3V rails.: The image shows the locations of TP4 , TP7 , and P5 for the op amp rail.","title":"If not using the raspberry Pi LVR monitor"},{"location":"lvr/lvr_shipping/lvr_shipping/","text":"Shipping procedure Check the database and label the LVR box # according to the previously numbered LVR boxes. As you pack LVRs check that their firmware is marked up to date in the database. If so, note which box they are in. If not, set them aside and check/program firmware before packing. Remove the CCMs from the LVR if not done already. Put the LVR in its ESD bag inside a pink bubble wrap bag. Put the CCMs in pink bubble wrap as they arrived. Wrap the LVR bag in an extra layer of bubble wrap from the LVR mechanics Put the LVR in the box with a thin layer of styrofoam over it. Put the CCMs for that LVR over the thing layer of styrofoam. When all LVRs are packed cover everything thoroughly with styrofoam, making sure to get it in and around the honeycomb structure. Put the pink foam on top of the styrofoam. Make sure there is enough styrofoam that there is no gap between the pink foam and the top of the box. Seal the box with tape.","title":"LVR shipping"},{"location":"lvr/lvr_shipping/lvr_shipping/#shipping-procedure","text":"Check the database and label the LVR box # according to the previously numbered LVR boxes. As you pack LVRs check that their firmware is marked up to date in the database. If so, note which box they are in. If not, set them aside and check/program firmware before packing. Remove the CCMs from the LVR if not done already. Put the LVR in its ESD bag inside a pink bubble wrap bag. Put the CCMs in pink bubble wrap as they arrived. Wrap the LVR bag in an extra layer of bubble wrap from the LVR mechanics Put the LVR in the box with a thin layer of styrofoam over it. Put the CCMs for that LVR over the thing layer of styrofoam. When all LVRs are packed cover everything thoroughly with styrofoam, making sure to get it in and around the honeycomb structure. Put the pink foam on top of the styrofoam. Make sure there is enough styrofoam that there is no gap between the pink foam and the top of the box. Seal the box with tape.","title":"Shipping procedure"},{"location":"lvr/qa_final/qa_final/","text":"Post-Burnin (final) QA Procedure If you are already familiar with this procedure, you can simply follow the LVR final QA checklist . Warning You should not change the set up on the shelf with the oscilloscope and the loads. All you'll need to change during final QA are The connections to the LVR In the case of MS boards, you'll need to add the jumper board to the MPSS black cables. It is easier to plug this board on the far end of the MPSS cable, and plug the other end of the MPSS cable directly to the LVR. Put on the wrist strap, take a burned in LVR. Set the switches as indicated in the table below. Order refers to toggles 1234 on the switch, with 1 meaning ON . (CCM) or (FPGA) refer to the side of the LVR the switch is on. There are four SW6 switches, ABCD. Confirm that the connection between GND (eg, TP7 ) and EARTH (lugs sticking out at the bottom) is still > 25k Ohms in both directions. Slide LVR into the cooling frame, input side first. With the torque screwdriver set to 5.5 inch*pounds, tighten the wedge locks. Connect input BB, the Rpi monitor, and turn on the PS at 6V as shown below. If fw version is not 2.06, also connect the Microsemi dongle, and update the firmware. Adjust P1 , P2 , and P5 if the base voltages are not as expected ( Vin_FPGA_1V5 =1.5 V, Vin_FPGA_3V3 =3.3 V, V_OPAMP_RAIL =5.5 V) Using the Rpi Butler software, request WORD2 to confirm fw version is 2.06 , and turn all channel ON Adjust the CCM potentiometers if the V_SENSE_MONi voltages are not about 1.25V, 1.52V, or 2.51V. Reduce power supply voltage to about 4.3V (1.2V LVR), 4.8V (1.5V LVR), or 5.3V (2.5V LVR) and check the under-voltage lockout (UVL) turns all channels off in the Rpi monitor. Set input voltage back to 6V Change SW1 to 0011 , and check the over-temperature protection turns all channels off and the LD7 LED turns on. Some times you may have to go all the way to 1111 . Afterwards change SW1 back to 0001 . Set all channels to READY with the Rpi Butler, and adjust P3 and P4 such that the V_SENSE_MONi voltages are between 110-190 mV (preferably 120-140 mV). Repeat these steps after setting all channels to OFF with the Rpi Butler and connecting the MPSS cable and RJ45 sense lines to each output. For MS LVRs, you will need to connect the jumper board to the MPSS cable (easier on the end away from the LVR): Set the oscilloscope trigger to Single , the Butler to \"Ripple ALL\", and check that the turn-on curve is smooth and comes to a sensible voltage (scope is single ended, so voltage will be higher than V_SENSE_MONi ). LVRs without slaves would look like on the left, MS like on the right. Confirm with multimeter that the voltage drops across resistors R73[A-H] and R91[A-H] for each channel match one-another to within 2-5% . These are the two medium-sized resistors with R050 and R150 printed on them. It is okay if the values do not match between different channels. Check the sense lines by verifying that when the sense line cable is disconnected the V_REG_OUT for the connected channels moves until it matches the other half of the LVR . The LVR can be shut down and set the JTAG into a radiation-hard state by moving the two jumpers on J22 (near ch8) to connect pins 4&6 and pins 3&5 (should be both jumpers moving one pin to the right if the output is facing you.) Set the LVR to its final configuration. Consult the database for valid 'sub types' and remove CCMS as necessary. For each removed CCM, one of the switches on SW3 and SW2 must be set off. Also, if removing an MS pair, turn off the corresponding switch on SW4. Use a marker to X off the stickers of removed CCMs. SW3 toggle Channels SW2 toggle Channels SW4 toggle Channels (Slave) 1 CH1 1 CH5 1 CH2 2 CH2 2 CH6 2 CH4 3 CH3 3 CH7 3 CH6 4 CH4 4 CH8 4 CH8 Update the database , and you are done!","title":"LVR Final QA"},{"location":"lvr/qa_final/qa_final/#post-burnin-final-qa-procedure","text":"If you are already familiar with this procedure, you can simply follow the LVR final QA checklist . Warning You should not change the set up on the shelf with the oscilloscope and the loads. All you'll need to change during final QA are The connections to the LVR In the case of MS boards, you'll need to add the jumper board to the MPSS black cables. It is easier to plug this board on the far end of the MPSS cable, and plug the other end of the MPSS cable directly to the LVR. Put on the wrist strap, take a burned in LVR. Set the switches as indicated in the table below. Order refers to toggles 1234 on the switch, with 1 meaning ON . (CCM) or (FPGA) refer to the side of the LVR the switch is on. There are four SW6 switches, ABCD. Confirm that the connection between GND (eg, TP7 ) and EARTH (lugs sticking out at the bottom) is still > 25k Ohms in both directions. Slide LVR into the cooling frame, input side first. With the torque screwdriver set to 5.5 inch*pounds, tighten the wedge locks. Connect input BB, the Rpi monitor, and turn on the PS at 6V as shown below. If fw version is not 2.06, also connect the Microsemi dongle, and update the firmware. Adjust P1 , P2 , and P5 if the base voltages are not as expected ( Vin_FPGA_1V5 =1.5 V, Vin_FPGA_3V3 =3.3 V, V_OPAMP_RAIL =5.5 V) Using the Rpi Butler software, request WORD2 to confirm fw version is 2.06 , and turn all channel ON Adjust the CCM potentiometers if the V_SENSE_MONi voltages are not about 1.25V, 1.52V, or 2.51V. Reduce power supply voltage to about 4.3V (1.2V LVR), 4.8V (1.5V LVR), or 5.3V (2.5V LVR) and check the under-voltage lockout (UVL) turns all channels off in the Rpi monitor. Set input voltage back to 6V Change SW1 to 0011 , and check the over-temperature protection turns all channels off and the LD7 LED turns on. Some times you may have to go all the way to 1111 . Afterwards change SW1 back to 0001 . Set all channels to READY with the Rpi Butler, and adjust P3 and P4 such that the V_SENSE_MONi voltages are between 110-190 mV (preferably 120-140 mV). Repeat these steps after setting all channels to OFF with the Rpi Butler and connecting the MPSS cable and RJ45 sense lines to each output. For MS LVRs, you will need to connect the jumper board to the MPSS cable (easier on the end away from the LVR): Set the oscilloscope trigger to Single , the Butler to \"Ripple ALL\", and check that the turn-on curve is smooth and comes to a sensible voltage (scope is single ended, so voltage will be higher than V_SENSE_MONi ). LVRs without slaves would look like on the left, MS like on the right. Confirm with multimeter that the voltage drops across resistors R73[A-H] and R91[A-H] for each channel match one-another to within 2-5% . These are the two medium-sized resistors with R050 and R150 printed on them. It is okay if the values do not match between different channels. Check the sense lines by verifying that when the sense line cable is disconnected the V_REG_OUT for the connected channels moves until it matches the other half of the LVR . The LVR can be shut down and set the JTAG into a radiation-hard state by moving the two jumpers on J22 (near ch8) to connect pins 4&6 and pins 3&5 (should be both jumpers moving one pin to the right if the output is facing you.) Set the LVR to its final configuration. Consult the database for valid 'sub types' and remove CCMS as necessary. For each removed CCM, one of the switches on SW3 and SW2 must be set off. Also, if removing an MS pair, turn off the corresponding switch on SW4. Use a marker to X off the stickers of removed CCMs. SW3 toggle Channels SW2 toggle Channels SW4 toggle Channels (Slave) 1 CH1 1 CH5 1 CH2 2 CH2 2 CH6 2 CH4 3 CH3 3 CH7 3 CH6 4 CH4 4 CH8 4 CH8 Update the database , and you are done!","title":"Post-Burnin (final) QA Procedure"},{"location":"minidaq/centos_tips/","text":"Downgrade a package If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name> Pinning a package to current version We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"CentOS tips"},{"location":"minidaq/centos_tips/#downgrade-a-package","text":"If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name>","title":"Downgrade a package"},{"location":"minidaq/centos_tips/#pinning-a-package-to-current-version","text":"We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"Pinning a package to current version"},{"location":"minidaq/minidaq_usage/","text":"Note The MiniDAQ configuration steps are only needed after a power cycle or power outage. Load a firmware file This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_Bologna+realsim_12+12links_unset_090620.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files Configure MiniDAQ control software After programming the MiniDAQ FPGA, restart (not power cycle) the server, and follow these steps: Open a terminal, type in: pcie40_reload -m config_fPLL.py Start the Project by going to going to Applications, WinCC, Project Administrator . From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Take the MiniDAQ. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3. Connect to MiniDAQ screen remotely If you are in UMD network, use a VNC client and the address are: <minidaq_ip_addr>:5900 If you are outside, first create a SSH tunnel to map MiniDAQ port 5900 to one of your localhost port (5901 in the example): SSH -L 5901:localhost:5900 <user>@<minidaq_ip_addr> Then use the local port for your VNC session: localhost:5901 Note The additional password for the VNC connection is printed on the sticker of the Windows PC . Info If you are a Linux user, install tigervnc and follow the standard literature on the Internet on how to use it. If you are a macOS user, use the mighty built-in VNC viewer from cli: open vnc://<ip_addr>:<port> nanoDAQ A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki . Configure a MiniDAQ from scratch Please refer to this guide on how to configure a MiniDAQ from scratch.","title":"MiniDAQ usage"},{"location":"minidaq/minidaq_usage/#load-a-firmware-file","text":"This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_Bologna+realsim_12+12links_unset_090620.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files","title":"Load a firmware file"},{"location":"minidaq/minidaq_usage/#configure-minidaq-control-software","text":"After programming the MiniDAQ FPGA, restart (not power cycle) the server, and follow these steps: Open a terminal, type in: pcie40_reload -m config_fPLL.py Start the Project by going to going to Applications, WinCC, Project Administrator . From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Take the MiniDAQ. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3.","title":"Configure MiniDAQ control software"},{"location":"minidaq/minidaq_usage/#connect-to-minidaq-screen-remotely","text":"If you are in UMD network, use a VNC client and the address are: <minidaq_ip_addr>:5900 If you are outside, first create a SSH tunnel to map MiniDAQ port 5900 to one of your localhost port (5901 in the example): SSH -L 5901:localhost:5900 <user>@<minidaq_ip_addr> Then use the local port for your VNC session: localhost:5901 Note The additional password for the VNC connection is printed on the sticker of the Windows PC . Info If you are a Linux user, install tigervnc and follow the standard literature on the Internet on how to use it. If you are a macOS user, use the mighty built-in VNC viewer from cli: open vnc://<ip_addr>:<port>","title":"Connect to MiniDAQ screen remotely"},{"location":"minidaq/minidaq_usage/#nanodaq","text":"A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"nanoDAQ"},{"location":"minidaq/minidaq_usage/#configure-a-minidaq-from-scratch","text":"Please refer to this guide on how to configure a MiniDAQ from scratch.","title":"Configure a MiniDAQ from scratch"},{"location":"teststands/ccm-qa/ccmqa-setup/","text":"","title":"CCM QA"},{"location":"teststands/lvr-finalqa/finalqa-setup/","text":"Text coming soon","title":"LVR Final QA"},{"location":"teststands/rpi-general/lvr-monitor-errata/","text":"LVR monitor general description The Monitor as it presently exists consists of several pieces Raspberry pi model \"3 B+\" or newer with 5V adapter Interface (mouse/keyboard/monitor) for raspberry pi 4x ABElectronics ADC Pi with 0.1\"-pitch shrouded right angle headers One of: Custom built harness using 26-gauge stranded PTFE-insulated wire with CGRID-III crimp contacts housings LVR montior breakout PCB Software based on the libraries available from ABElectronics with modifications by PMH for faster sampling of all 28 channels Raspberry pi pinout Below is a pinout for the raspberry pi 3b+. Pins of interest for the LVR testing are: 1. the SDA and SCL i2c lines, which talk to the ADC Pi expansion boards. 2. The 5V and 3V (as well as GND) pins used to power and permenently pull up Zishuo's load board for the final QA 3. Pins 19, 21, 23 used by the SPI interface To use the i2c and SPI interfaces with the raspbian OS they must be enabled via sudo raspi-config . For SPI it is recommended that the pin20 ground be connected to the LVR as well if possible, though it is not strictly necessary if the LVR is not powering anything and the various system grounds are well-behaved. ADC Pi notes Click here for pdf schematic Mostly of note here is the fact that the inputs are run through a 10k/6.8k voltage divider. This means that any resistance in series with the input changes the voltage divider, which must be corrected in software . For example, if you measure a voltage on the LVR that has a 1k resistor before the pin, your measurement will be too low by a factor of 16,800/17,800 and you need to scale what the software gives you up to compensate. The ADC boards each has one of several recommended i2c addresses, shown below. The physical order for the intial QA Rpi is Configuration 1 at the bottom closest to the Raspberry pi and then 2, 3, 4 moving up the stack, the final QA has the order reversed because oops. In the LVR monitor python script, the following assignments are assumed: Configuration Number Inputs 1 Housekeeping (3v3,1v5,V_OP,temp) 2 V_OUT 3 V_SENSE 4 i_MON outputs LVR - pi interface The interface between the Raspberry Pi + ADCs and the LVR is through the TCM connector on the LVR. The general diagram of the desired connections is shown below and is also available in PDF form here . This harness is implemented either in the wire harness (should be back at the desk by the shelves, and should be usable as backup) or as a breakout board plus IDC connectors. The breakout board was produced by PCB express and, unfortunately, contains some errors which have been corrected within software or by reworking. I've tried to document them below as best I can. In the latter case, the reworks include the addition of R3 as shown above, and a correction to how R1 and R2 are connected.","title":"LVR Monitor Hardware"},{"location":"teststands/rpi-general/lvr-monitor-errata/#lvr-monitor-general-description","text":"The Monitor as it presently exists consists of several pieces Raspberry pi model \"3 B+\" or newer with 5V adapter Interface (mouse/keyboard/monitor) for raspberry pi 4x ABElectronics ADC Pi with 0.1\"-pitch shrouded right angle headers One of: Custom built harness using 26-gauge stranded PTFE-insulated wire with CGRID-III crimp contacts housings LVR montior breakout PCB Software based on the libraries available from ABElectronics with modifications by PMH for faster sampling of all 28 channels","title":"LVR monitor general description"},{"location":"teststands/rpi-general/lvr-monitor-errata/#raspberry-pi-pinout","text":"Below is a pinout for the raspberry pi 3b+. Pins of interest for the LVR testing are: 1. the SDA and SCL i2c lines, which talk to the ADC Pi expansion boards. 2. The 5V and 3V (as well as GND) pins used to power and permenently pull up Zishuo's load board for the final QA 3. Pins 19, 21, 23 used by the SPI interface To use the i2c and SPI interfaces with the raspbian OS they must be enabled via sudo raspi-config . For SPI it is recommended that the pin20 ground be connected to the LVR as well if possible, though it is not strictly necessary if the LVR is not powering anything and the various system grounds are well-behaved.","title":"Raspberry pi pinout"},{"location":"teststands/rpi-general/lvr-monitor-errata/#adc-pi-notes","text":"Click here for pdf schematic Mostly of note here is the fact that the inputs are run through a 10k/6.8k voltage divider. This means that any resistance in series with the input changes the voltage divider, which must be corrected in software . For example, if you measure a voltage on the LVR that has a 1k resistor before the pin, your measurement will be too low by a factor of 16,800/17,800 and you need to scale what the software gives you up to compensate. The ADC boards each has one of several recommended i2c addresses, shown below. The physical order for the intial QA Rpi is Configuration 1 at the bottom closest to the Raspberry pi and then 2, 3, 4 moving up the stack, the final QA has the order reversed because oops. In the LVR monitor python script, the following assignments are assumed: Configuration Number Inputs 1 Housekeeping (3v3,1v5,V_OP,temp) 2 V_OUT 3 V_SENSE 4 i_MON outputs","title":"ADC Pi notes"},{"location":"teststands/rpi-general/lvr-monitor-errata/#lvr-pi-interface","text":"The interface between the Raspberry Pi + ADCs and the LVR is through the TCM connector on the LVR. The general diagram of the desired connections is shown below and is also available in PDF form here . This harness is implemented either in the wire harness (should be back at the desk by the shelves, and should be usable as backup) or as a breakout board plus IDC connectors. The breakout board was produced by PCB express and, unfortunately, contains some errors which have been corrected within software or by reworking. I've tried to document them below as best I can. In the latter case, the reworks include the addition of R3 as shown above, and a correction to how R1 and R2 are connected.","title":"LVR - pi interface"}]}