{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation site for UT electronic boards designed by UMD LHCb group.","title":"Getting started"},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2019, UMD LHCb group All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"dcb/dcb_assembly/dcb_assembly/","text":"Visual inspection of new DCB Record serial number from sticker on the DCB to the database and put a new label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted. Install thermal gap filler on the DCB backplate There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB. Install the heat pipe on the DCB backplate To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear. Final assembly Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Finally, install the optical mezzanines. (To be added) Warning The standoff/screw on the DCB side should not be rotated to avoid damages to the surface of the DCB. Continuity check Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"DCB mechanical assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#visual-inspection-of-new-dcb","text":"Record serial number from sticker on the DCB to the database and put a new label on the board. Warning Make sure you are grounded at all times when handling the DCB! Look for scratches, gouges, and any other signs of obvious damage on the surface of the DCB. Inspect more thoroughly by focusing on 1 GBTx cluster at a time. All clusters should be the same and include the same components. If a piece appears to be missing, compare to the other groups. If they are all the same, it is likely correct Look for any pieces that are bent, broken, or otherwise askew within each cluster. Note Each GBTx has a marked corner which must match a white dot on the DCB. The black SCA also has marked corner and dot. Note There are also a couple small components, the ones next to pieces labeled \"R500\", with faint white lines on one side. That side also points to a white dot on the DCB The dots are on the top left in this example Now look at the 4 mezzanine connectors (the connectors inside the outline). Angle the DCB to see each pin clearly and confirm there are no globs of solder possibly connecting two pins. Also confirm that no pins are bent or broken. Finally examine the large backplane connecter on the other end of the DCB. Look into the connector at the pins and make sure they are all uniform. A bent pin could break a backplane. Tilt the DCB to look between the board and the connector. It is attached by many small solder pads so must lay flat and straight. Any angle or disconnected pads should be noted.","title":"Visual inspection of new DCB"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-thermal-gap-filler-on-the-dcb-backplate","text":"There are pre-cut thermal fillers for the DCB backplate. Peel the film off and put it on, making sure that the pre-cut holes align with the holes of the DCB backplate. It is much easier to ensure the thermal gap filler is straight if two people work together. Warning Make sure that the thermal gap filler is placed on the flat side of the backplate. The backplate is not symmetrical. The thermal gap should be put on the side that doesn't have countersuck screw holes. Once the thermal gap filler looks straight then use a screw to take out any leftover thermal gap filler over the screw-holes that may have not been trimmed off. This will ensure that the backplate will connect smoothly to the DCB and that no residue from the thermal gap filler will attach to the DCB.","title":"Install thermal gap filler on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#install-the-heat-pipe-on-the-dcb-backplate","text":"To install the heat pipes: Put a thin line of thermal grease on the pipes using a spreader, not going all the way to the edges. The grease squeezes out when the pipes are installed and tightened. Use 10 M.3 countersunk bolts to secure the heat pipe to the backplate. Note that it is easiest to screw in opposite diagonal bolts first to fix the heat pipe. Wipe away excess grease along the sides of the heat pipe. Can use Isopropyl Alchohol to clean residue if needed (above 70% IPA). Repeat for the second heat pipe. Warning Pay attention to the direction of the heat pipe! The long end should point toward the flat side of the backplate and the short piping toward the notched side. Follow the pictures below for further guidance or if anything is not clear.","title":"Install the heat pipe on the DCB backplate"},{"location":"dcb/dcb_assembly/dcb_assembly/#final-assembly","text":"Note The final assembly is easiest with two people! For final assembly of the board: Use 16 M.2.5 countersunk bolts along with 16 long M.2.5 hexagonal nuts to install the DCB backplate onto the DCB and provide supports for the optical mezzanines. The bolts should be placed on the backplate side and should fit into the countersunk holes while the nuts will sit on top of the DCB. Again fix opposite diagonal bolts first. Note This is for the flat edge/long pipe side of the assembly. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Use 8 M.3 countersunk bolts along with 8 short M.3 hexagonal nuts and Kapton washers to secure the notched side of the backplate. The washers should be placed on the DCB to protect it from the hex nut. Warning The nuts on top of the DCB should not be rotated as they will damage the surface of the DCB. In order to prevent this secure the nut using pliers or a socket wrench and use a screwdriver to tighten. Finally, install the optical mezzanines. (To be added) Warning The standoff/screw on the DCB side should not be rotated to avoid damages to the surface of the DCB.","title":"Final assembly"},{"location":"dcb/dcb_assembly/dcb_assembly/#continuity-check","text":"Measure the resistance between any of the TP5 around the data GBTxs and the aluminum backplate. The resistance should be very large to ensure the backplate is not electronically connected to the DCB.","title":"Continuity check"},{"location":"dcb/dcb_qa/dcb_qa/","text":"The DCB has a few purposes; aggregating data, controlling the stave, and monitoring. It has 4 optical mezzanines with 3 VTTxs and 1 VTRx, as well as 1 master GBTx, 1 GBT-SCA, and 6 data GBTxs. The DCB talks to the stave through the Backplane connecter and a computer through the mezzanines. The PRBS test checks the DCB ability to get data from the GBTxs to the computer. A psuedo-random bit sequence, or PRBS, is generated in the data GBTxs and sent to our computer via the VTTxs. This test verifies the black data lines on the image. In the SALT test, we tell the stave what data to send to the DCB to check the grey data lines. Each line represents 12 E-links connecting the stave to the GBTxs. For our tests, we have the stave sending \"c4\" repeated to the DCB. It is easy for this to get out of phase, which is why we accept any stable data in the memory monitor as a success. To see possible out-of-phase responses, you can break \"c4\" into 8bit binary, shift it one bit left or right, then make it hex again. We check the DCB control of the stave by testing TFC loopback, where a GBTx sends a header of 04 to the stave. We know the E-links will be good as they have just been checked, so we expect to see the stave repeating 04 back to us if everything is working correctly. It is also fine here to see a bit-shift, making it look like the stave is repeating 01, 02, or 08. There are also ADCs (analog to digital converters) we look at to verify the power and, for the ones attached to thermistors, monitor the temperature on the DCB itself and the stave. Setting up DCB Warning Make sure you are grounded at all times when handling the DCB! Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts, but it is not necessary to screw in the mezzanines to the long hexes. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection, Not sure if this is a necessary step will either be JD10 or JD11 Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in. Checking Power There are 3 seperate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... Cables are labeled DCB-A source & return and DCB-B source & return. A goes to the even board of a pair, slot JD10, and B goes to the odd board, JD11. SRC connects to the hevily labeled wire and RET connects to ground. VTTx Similar power setup to DCB, one set VTTx M and the other just VTTx with each having a SRC and RET . It doesn't matter which set gets connected to the inputs, as long as the sets are kept together. Connection is the same as DCB, SRC goes to the heavily labeled wire and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires. Fusing GBTx Verify the jumper on J2, next to the optical mezzanines, looks like this First, connect the usb dongle to the master optical mezzanine. You have to slide the thin flat wires into the top of the mezzanine, making sure the exposed metal side is facing down toward the DCB. Then connect the U.FL wire from the dongle to J5 on the mezzanine. The connection is underneath, but there is a label for it on the top. On the left of the picture is a different power breakout board that must also be attatched. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5. Power on the DCB. Open the GBTX Programmer on the windows PC Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now click select all , check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Shut off power to the DCB and move the right jumper on J2 up one to be inline with the other jumper. Note add picture To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQby going to Applications , WinCC , Project Administrator , then double click on the top project. Programming Data GBTxs There are 6 data GBTxs on each DCB, and these must be programed everytime the board gets power cycled. Note NanoDAQ has some documentation here. A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here. In the nanoDAQ command prompt, we're going to pull the reset, also called gpio, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier. PRBS Test Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\" SALT Testing For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, it doesn't matter which one you double click. In nanoDAQ, type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are stable. Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using \"-s 2\" Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are stable. Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using \"-s 4\" Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14 TFC Test Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating ADC Read Out If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows - PC: UMDlab, GBT ID: 0, SCA ID: 0, Version: 2 For now, set address to \"Read Channel\" and line to 24 then 25. Clicking read on the right updates the \"Data out\" field. Line 24 should be around 0.5 and line 25 should be around 0.833 If you're getting an error, try clicking \"Activate Channel\" then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to \"Current Source\" and put FFFFFFFF (8 Fs) in \"Data in\", then click read/write Put address back to \"Read Channel\" and check lines 0, 1, 16, 17, and 18 by clicking read and looking at \"Data in\" Line 0 expected value is 0.53 Other lines expected value 0.15 Optical to Master GBT We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from \"J4\" on the DCB, directly under an optical mezzanine. It is also labeled \"MC CONFIGSELECT\" Set up GBT Client such that GBT ID:0, Device Address: 7, Register Address: 28, Size: 1 Click Read on the right and you should see 00 in \"Data out\" Put FF in \"Data in\" and click read/write \"Data out\" should now read FF","title":"DCB QA"},{"location":"dcb/dcb_qa/dcb_qa/#setting-up-dcb","text":"Warning Make sure you are grounded at all times when handling the DCB! Verify the backplane connector. Do not plug in if its pins are bent, as it can break the backplane. Verify optical mezzanines are attached. They should rest on the long hex nuts, but it is not necessary to screw in the mezzanines to the long hexes. Attach optical fibers to the mezzanines. Two fibers go into each board. They should be sequential except for the two attached fibers which go to the master. The order should be something like 1, 2, Masters, 3, 4, 5, 6 Correct slot based on stave connection, Not sure if this is a necessary step will either be JD10 or JD11 Slide DCB into the proper slot using the heat spreader pipes as handles. Let it gently go down until until the guide rails at the bottom go in and the DCB sits correctly. Then push until it clicks in.","title":"Setting up DCB"},{"location":"dcb/dcb_qa/dcb_qa/#checking-power","text":"There are 3 seperate power lines, for the DCB, the VTTx's, and the Stave. They should not be moved or changed over the course of this QA, but it is good to verify the connections are correct. DCB Power comes to pairs of boards as labeled by the slot they are put in. 0 and 1, 2 and 3, etc... Cables are labeled DCB-A source & return and DCB-B source & return. A goes to the even board of a pair, slot JD10, and B goes to the odd board, JD11. SRC connects to the hevily labeled wire and RET connects to ground. VTTx Similar power setup to DCB, one set VTTx M and the other just VTTx with each having a SRC and RET . It doesn't matter which set gets connected to the inputs, as long as the sets are kept together. Connection is the same as DCB, SRC goes to the heavily labeled wire and RET goes to ground. Stave There's P1, P2, P3, and P4 which each have SRC and RET . Make sure P1 SRC goes to P1 SRC and so on for all 8 wires.","title":"Checking Power"},{"location":"dcb/dcb_qa/dcb_qa/#fusing-gbtx","text":"Verify the jumper on J2, next to the optical mezzanines, looks like this First, connect the usb dongle to the master optical mezzanine. You have to slide the thin flat wires into the top of the mezzanine, making sure the exposed metal side is facing down toward the DCB. Then connect the U.FL wire from the dongle to J5 on the mezzanine. The connection is underneath, but there is a label for it on the top. On the left of the picture is a different power breakout board that must also be attatched. Its powered by two 1.5 volt connections with amp limit 2.5 and one 3.3 volt connection with amp limit 0.5. Power on the DCB. Open the GBTX Programmer on the windows PC Check the connection is working by clicking Read GBTX , the state should change to pauseForConfig Go to the Fuse my GBTx tab all the way on the right click Import Image , make sure you can see .txt files, and select master.txt click Write GBTX then Read GBTX , the state should change to waitDESLock to the right of table, find and click update view. All of the entries in the table should now be green Now click select all , check enable fusing and fuse updateConfig , and click the big FUSE button at the bottom Shut off power to the DCB and move the right jumper on J2 up one to be inline with the other jumper. Note add picture To verify the fuse was successful, power the DCB back on. in the GBTX Programmer , read and update view like before. The table should still be all green On the Linux computer, we'll use nanoDAQ which gives some MiniDAQ functions in Python. Go to $HOME/src/nanoDAQ in a command line on the server to use. Also open MiniDAQby going to Applications , WinCC , Project Administrator , then double click on the top project.","title":"Fusing GBTx"},{"location":"dcb/dcb_qa/dcb_qa/#programming-data-gbtxs","text":"There are 6 data GBTxs on each DCB, and these must be programed everytime the board gets power cycled. Note NanoDAQ has some documentation here. A pdf that goes over a lot of MiniDAQ and GBTx usage can be downloaded here. In the nanoDAQ command prompt, we're going to pull the reset, also called gpio, low and try to program it then high and try to program it. First, enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state low to pull all resets low. Then attempt to program the GBTxs with ./dcbutil.py init ./gbtx_config/slave-Tx-wrong_termination.txt -g 0 You should get an error Now do the reverse by changing --final_state to high to enter ./dcbutil.py gpio --reset 0 1 2 3 4 5 6 --final_state high You should now be able to program the GBTxs with the command you inputted earlier.","title":"Programming Data GBTxs"},{"location":"dcb/dcb_qa/dcb_qa/#prbs-test","text":"Note This is the MiniDAQ \"Top\" panel that is referenced a couple times. Most menus can be found starting from this panel. To start PRBS, go to the nanoDAQ command line and enter ./dcbutil.py prbs on Open the PRBS panel by going to the top MiniDAQ hardware panel and clicking PRBS . In the top left of the panel, click in order: Stop All Generators \u2192 Stop All Checkers \u2192 Reset All Counters \u2192 Start All Generators \u2192 Start All Checkers \u2192 Start All Counters Allow test to run for 1-5 minutes . It passes if there are 6 green channels shown on the PRBS panel. The picture shows 6 red ones. These are the correct channels and should be green if everything passes Check if the DCB can regain lock by unplugging the master optical fibers then plugging them back in. Remember, master are the ones connected. Enter ./dcbutil.py prbs off in the nanoDAQ command line. No output is a success, otherwise it will report \"Master GBT not locked\"","title":"PRBS Test"},{"location":"dcb/dcb_qa/dcb_qa/#salt-testing","text":"For this step, we need to open the Memory Monitoring panel in MiniDAQ. In the Top panel, double click DAQ to open a new window, then keep double clicking TELL40 until the following panel shows up, with the tab for Memory Monitoring on the right. Note The last TELL40 has a suffix, it doesn't matter which one you double click. In nanoDAQ, type in the command ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state low Now type ./saltutil.py [I2C] read 0 0 1 replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 You have to enter this command 3 times, once for each number. If it is working correctly you'll get an error. Then repeat the process but change the final state to high. You should get a result. ./dcbutil.py gpio --reset 0 1 2 3 4 5 --final_state high The following is for a DCB in slot JD10 only Start with ./saltutil.py 4 init for I2C 4 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 1 to work with GBT 1 Go to the memory monitoring panel and select link 22 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 1 keep incrementing the tmp_*.xml until the values are stable. Repeat this process starting with ./saltutil.py 3 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 2 Link Selection must be on 12 now When incrementing tmp_*.xml keep using \"-s 2\" Repeat again with ./saltutil.py 5 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 6 Link Selection must be on 13 Note Refer to this table if instructions are unclear as to what numbers you should be using. Slot GBT I2C Link Selection JD10 1 4 22 JD10 2 3 12 JD11 3 2 23 JD11 4 1 21 JD11 5 0 14 JD10 6 5 13 The following is for a DCB in slot JD11 only Start with ./saltutil.py 2 init for I2C 2 Type ./dcbutil.py init ~/bin/tmp_0.xml -s 3 to work with GBT 3 Go to the memory monitoring panel and select link 23 at the top Verify that Write Address Memory on the right changes values every couple seconds and Write Signal Status is green. Now look at the table, focusing on the latter 3 columns. There are 8 digits in each column. If they are NOT stable values, go to nanoDAQ and type ./dcbutil.py init ~/bin/tmp_1.xml -s 3 keep incrementing the tmp_*.xml until the values are stable. Repeat this process starting with ./saltutil.py 1 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 4 Link Selection must be on 21 now When incrementing tmp_*.xml keep using \"-s 4\" Repeat again with ./saltutil.py 0 init followed by ./dcbutil.py init ~/bin/tmp_0.xml -s 5 Link Selection must be on 14","title":"SALT Testing"},{"location":"dcb/dcb_qa/dcb_qa/#tfc-test","text":"Type ./saltutil.py [I2C] ser_src tfc replacing the [I2C] with 3, 4, and 5 if the DCB is in slot JD10. Replace with 0, 1, 2 if the DCB is in slot JD11 Look in memory monitoring again and select links based on slot Same as SALT. JD10 gets links 22, 12, and 13. JD11 gets links 23, 21, and 14 The values in the table should be something similar to 01, 02, 04, or 08 repeating","title":"TFC Test"},{"location":"dcb/dcb_qa/dcb_qa/#adc-read-out","text":"If there is no MiniDAQ panel called GBT Client already open, open it by going back to the MiniDAQ UI (the one with \"Gedi\" in its title) and under LHCB Framework , click GBT Client . Choose GBT under Communication on the top left. Now navigate to the ADC tab. Configure settings as follows - PC: UMDlab, GBT ID: 0, SCA ID: 0, Version: 2 For now, set address to \"Read Channel\" and line to 24 then 25. Clicking read on the right updates the \"Data out\" field. Line 24 should be around 0.5 and line 25 should be around 0.833 If you're getting an error, try clicking \"Activate Channel\" then try again When looking in slot JD10 Also read out lines 5, 6, and 7. They should all be 0.55 When looking in slot JD11 Also read out lines 2, 3, and 4. They should all be 0.55 Change address to \"Current Source\" and put FFFFFFFF (8 Fs) in \"Data in\", then click read/write Put address back to \"Read Channel\" and check lines 0, 1, 16, 17, and 18 by clicking read and looking at \"Data in\" Line 0 expected value is 0.53 Other lines expected value 0.15","title":"ADC Read Out"},{"location":"dcb/dcb_qa/dcb_qa/#optical-to-master-gbt","text":"We want to verify that we can communicate to the Master GBTx through the optical fibers. Make sure GBT Client is still open, and go to the tab labeled GBT . Verify or add a red jumper cable to the first connection from \"J4\" on the DCB, directly under an optical mezzanine. It is also labeled \"MC CONFIGSELECT\" Set up GBT Client such that GBT ID:0, Device Address: 7, Register Address: 28, Size: 1 Click Read on the right and you should see 00 in \"Data out\" Put FF in \"Data in\" and click read/write \"Data out\" should now read FF","title":"Optical to Master GBT"},{"location":"lvr/lvr_pwr_input_brkout_brd_assembly/","text":"","title":"LVR power input breakout board assembly"},{"location":"lvr/lvr_pwr_input_brkout_brd_qa/","text":"","title":"LVR power input breakout board QA"},{"location":"lvr/lvr_qa/","text":"","title":"LVR QA"},{"location":"minidaq/centos_tips/","text":"Downgrade a package If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name> Pinning a package to current version We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"CentOS tips"},{"location":"minidaq/centos_tips/#downgrade-a-package","text":"If we want to downgrade a package to a previous highest version that is available in a remote repository, we can use the following command: sudo yum downgrade <package_name>","title":"Downgrade a package"},{"location":"minidaq/centos_tips/#pinning-a-package-to-current-version","text":"We use yum-plugin-versionlock . Install that if it's not already installed: sudo yum install yum-plugin-versionlock To pin a package to its current version so that no automatic update will be performed on that package, issue the following command: sudo yum versionlock <package_name> To display locked packages: sudo yum versionlock list To discard the list: sudo yum versionlock clear","title":"Pinning a package to current version"},{"location":"minidaq/minidaq_usage/","text":"Load a firmware file This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files Reprogram the on-board flash memory This is the firmware that will be loaded by default on each fresh power-on. To do so: pcie40_pgm <path_to_pof_file> Note that here we need a pof file, not a sof file. Currently, we have some pof files in: /opt/lhcb/daq40/firmware Configure MiniDAQ control software After programming the MiniDAQ FPGA, reboot (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3. nanoDAQ A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"MiniDAQ usage"},{"location":"minidaq/minidaq_usage/#load-a-firmware-file","text":"This is temporary, as MiniDAQ will reprogram itself with the firmware stored on the on-board flash memory. To load a firmware: pcie40_pgm ~/src/sof_files/lhcb_daq_firmware_readout40_pcie40v1_minidaq_forUT_unset_131119.sof In our MiniDAQ server, all sof firmware are located in: $HOME/src/sof_files","title":"Load a firmware file"},{"location":"minidaq/minidaq_usage/#reprogram-the-on-board-flash-memory","text":"This is the firmware that will be loaded by default on each fresh power-on. To do so: pcie40_pgm <path_to_pof_file> Note that here we need a pof file, not a sof file. Currently, we have some pof files in: /opt/lhcb/daq40/firmware","title":"Reprogram the on-board flash memory"},{"location":"minidaq/minidaq_usage/#configure-minidaq-control-software","text":"After programming the MiniDAQ FPGA, reboot (not power cycle) the server, and follow these steps: Open a terminal, type in: config_fPLL.py From the top menu, click JCOP Framework , then Device Editor and Navigator , then FSM . Now expand dist_1 , then right click on MiniDAQ to open the TOP panel. Click the MiniDAQ state (it now should be Not Configured ), then click Configure . If not all devices showing as Ready (excluding DATAFLOW ), repeat 2-3.","title":"Configure MiniDAQ control software"},{"location":"minidaq/minidaq_usage/#nanodaq","text":"A series of command-line scripts have been implemented in nanoDAQ . The commands are explained in the nanoDAQ wiki .","title":"nanoDAQ"}]}